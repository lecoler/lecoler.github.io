<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lecoler博客</title>
  
  <subtitle>我们只不过是被命运推着前进罢了，但很庆幸命运使你我在此相遇。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lecoler.github.io/"/>
  <updated>2021-05-27T10:05:14.781Z</updated>
  <id>https://lecoler.github.io/</id>
  
  <author>
    <name>lecoler</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>串口（com）</title>
    <link href="https://lecoler.github.io/2021/01/18/com/"/>
    <id>https://lecoler.github.io/2021/01/18/com/</id>
    <published>2021-01-18T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.781Z</updated>
    
    <content type="html"><![CDATA[<p>串口标准地址和IRQ  </p><a id="more"></a><h3 id="标准地址和IRQ"><a href="#标准地址和IRQ" class="headerlink" title="标准地址和IRQ"></a>标准地址和IRQ</h3><p>串口又称COM，COM1~COM8</p><p>COM1、COM2设有标准地址和IRQ</p><table><thead><tr><th>COM</th><th>IRQ</th><th>I/O地址</th></tr></thead><tbody><tr><td>COM1</td><td>4</td><td>0x3F8</td></tr><tr><td>COM2</td><td>3</td><td>0x2F8</td></tr><tr><td>COM3</td><td>4</td><td>0x3E8</td></tr><tr><td>COM4</td><td>3</td><td>0x2E8</td></tr><tr><td>COM5</td><td>4</td><td>0x3E0</td></tr><tr><td>COM6</td><td>3</td><td>0x2E0</td></tr><tr><td>COM7</td><td>4</td><td>0x338</td></tr><tr><td>COM8</td><td>3</td><td>0x238</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;串口标准地址和IRQ  &lt;/p&gt;
    
    </summary>
    
      <category term="随手记" scheme="https://lecoler.github.io/categories/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="com" scheme="https://lecoler.github.io/tags/com/"/>
    
      <category term="serialPort" scheme="https://lecoler.github.io/tags/serialPort/"/>
    
  </entry>
  
  <entry>
    <title>用shell脚本实现简易的oss上传</title>
    <link href="https://lecoler.github.io/2020/10/15/shell-oss/"/>
    <id>https://lecoler.github.io/2020/10/15/shell-oss/</id>
    <published>2020-10-15T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.785Z</updated>
    
    <content type="html"><![CDATA[<p>用shell写了个简易的阿里oss文件上传，源码如下    </p><a id="more"></a><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>确保安装了以下binary：</p><ul><li>openssl</li><li>base64</li><li>curl</li></ul><p>验证是否安装，打开命令行输入以下指令</p><p>有返回相应的版本信息，即已安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl</span></span><br><span class="line">openssl version</span><br><span class="line"><span class="meta">#</span><span class="bash"> base64</span></span><br><span class="line">base64 --version</span><br><span class="line"><span class="meta">#</span><span class="bash">curl</span></span><br><span class="line">curl -V</span><br></pre></td></tr></table></figure><h3 id="使用手册"><a href="#使用手册" class="headerlink" title="使用手册"></a>使用手册</h3><ol><li><a href="/static/shell/oss.sh">下载脚本文件</a></li><li>打开脚本文件，填入相关配置信息，<code>AccessKeyId,AccessKeySecret,BucketName...</code></li><li>于shell中执行<code>./oss.sh 要上传的文件 上传到oss的位置</code></li></ol><p><strong>Tip</strong></p><ul><li>Win下 可下载 git，使用git 的 <code>git bash</code>执行<code>.sh</code>脚本文件</li></ul><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>oss.sh</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置*</span></span><br><span class="line">AccessKeyId=""</span><br><span class="line">AccessKeySecret=""</span><br><span class="line">BucketName=""</span><br><span class="line">Host="$&#123;BucketName&#125;.oss-xx-xxxx.aliyuncs.com"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 需上传的文件（绝对路径）</span></span><br><span class="line">file=$1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 需上传的key（oss上的存放路径，包含自身文件名）</span></span><br><span class="line">key=$2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断是否传参</span></span><br><span class="line">if [ -z "$file" ] || [ -z "$key" ]; then</span><br><span class="line">    printf "\n%s\n\n" "帮助"</span><br><span class="line">    printf " %-10s %-20s\n" "第一个参数" "需上传文件绝对路径"</span><br><span class="line">    printf " %-10s %-20s\n\n" "" "如：/d/items/test/pic.jpg"</span><br><span class="line">    printf " %-10s %-20s\n" "第二个参数" "上传到oss的存放路径（从bucket根目录→上传文件名）"</span><br><span class="line">    printf " %-10s %-20s\n\n" "" "如：test/pic.jpg"</span><br><span class="line">    printf "\n\n\t%s\n" "例子：./oss.sh /d/items/test/pic.jpg test/pic.jp"</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line">printf "\n %s \n\n" "Start to upload files($&#123;file&#125;) to oss(/$&#123;BucketName&#125;/$&#123;key&#125;)"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前时间</span></span><br><span class="line">DateValue=$(env LANG=en_US.UTF-8 date -u "+%a, %d %b %Y %T GMT")</span><br><span class="line"><span class="meta">#</span><span class="bash"> 请求数据类型</span></span><br><span class="line">ContentType="application/octet-stream"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 路径</span></span><br><span class="line">Resource="/$&#123;BucketName&#125;/$&#123;key&#125;"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符串</span></span><br><span class="line">StringToSign="PUT\n\n$&#123;ContentType&#125;\n$&#123;DateValue&#125;\n$&#123;Resource&#125;"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加密</span></span><br><span class="line">Sign=$(echo -en "$&#123;StringToSign&#125;" | openssl sha1 -hmac $&#123;AccessKeySecret&#125; -binary | base64)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始请求</span></span><br><span class="line">Result=$(curl -i -q -X PUT -T "$&#123;file&#125;" \</span><br><span class="line">    -H "Host: $&#123;Host&#125;" \</span><br><span class="line">    -H "Date: $&#123;DateValue&#125;" \</span><br><span class="line">    -H "Content-Type: $&#123;ContentType&#125;" \</span><br><span class="line">    -H "Authorization: OSS $&#123;AccessKeyId&#125;:$&#123;Sign&#125;" \</span><br><span class="line">    -H "Accept: */*" \</span><br><span class="line">    "https://$&#123;Host&#125;/$&#123;key&#125;")</span><br><span class="line">echo "$&#123;Result&#125;"</span><br><span class="line">printf "\n %s \n" "The end!"</span><br><span class="line">echo "Press any key to exit!"</span><br><span class="line">read -rn 1</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用shell写了个简易的阿里oss文件上传，源码如下    &lt;/p&gt;
    
    </summary>
    
      <category term="shell" scheme="https://lecoler.github.io/categories/shell/"/>
    
    
      <category term="oss" scheme="https://lecoler.github.io/tags/oss/"/>
    
      <category term="sh" scheme="https://lecoler.github.io/tags/sh/"/>
    
      <category term="工具" scheme="https://lecoler.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>安卓获取所在局域网的其他设备IP</title>
    <link href="https://lecoler.github.io/2020/09/15/Android-ipScan/"/>
    <id>https://lecoler.github.io/2020/09/15/Android-ipScan/</id>
    <published>2020-09-15T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.781Z</updated>
    
    <content type="html"><![CDATA[<p>记一次项目中的需求，获取安卓设备所在局域网的其他设备的IP和MAC地址<br>通过查询资料，发现几种方式</p><ul><li><code>shell</code> 执行 <code>ping</code> 的形式，通了则存在设备<ul><li>耗时</li></ul></li><li><code>arp -a</code> 查询路由表<ul><li>安卓不支持此命令，只能通过查询文件代替<code>cat proc/net/arp</code></li><li>不能确保最新     </li></ul></li><li>通过发送个<code>udp</code>包，再拿到最新的<code>arp</code>表<ul><li>发通了则存在设备（不用管接收的设备是否处理<code>udp</code>包）</li><li>本文采用此方式实现</li><li>只需1-2秒时间，就能获取局域网设备IP和MAC地址    </li></ul></li></ul><a id="more"></a><h3 id="IP搜索"><a href="#IP搜索" class="headerlink" title="IP搜索"></a>IP搜索</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader</span><br><span class="line"><span class="keyword">import</span> java.net.*</span><br><span class="line"><span class="keyword">import</span> kotlin.Exception</span><br><span class="line"><span class="keyword">import</span> kotlin.concurrent.thread</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> IpScan &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取本机ip</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hostIp</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">var</span> hostIp: String = <span class="string">""</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> nis = NetworkInterface.getNetworkInterfaces()</span><br><span class="line">            <span class="keyword">for</span> (ni <span class="keyword">in</span> nis) &#123;</span><br><span class="line">                <span class="keyword">val</span> ias = ni.inetAddresses</span><br><span class="line">                <span class="keyword">for</span> (ia <span class="keyword">in</span> ias) &#123;</span><br><span class="line">                    <span class="comment">// 跳过 ipv6</span></span><br><span class="line">                    <span class="keyword">if</span> (ia <span class="keyword">is</span> Inet6Address) &#123;</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (ia.hostAddress != <span class="string">"127.0.0.1"</span>) &#123;</span><br><span class="line">                        hostIp = ia.hostAddress</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            Log.e(<span class="string">"IP扫描"</span>, <span class="string">"获取本机IP报错：<span class="subst">$&#123;e.message.toString()&#125;</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hostIp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> 开始扫描ip 耗时大约 1s</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span> lecoler</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> start:Int    开始的ip （范围：1-254）</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> end:Int   结束的ip （范围：1-254）</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> CB: (HashMap&lt;String, String&gt;) -&gt; Unit   结果回调</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">(start: <span class="type">Int</span>, end: <span class="type">Int</span>, CB: (<span class="type">HashMap</span>&lt;<span class="type">String</span>, String&gt;)</span></span> -&gt; <span class="built_in">Unit</span>) &#123;</span><br><span class="line">        <span class="comment">// 本机ip</span></span><br><span class="line">        <span class="keyword">val</span> hostIp = hostIp()</span><br><span class="line">        <span class="comment">// 取前缀</span></span><br><span class="line">        <span class="keyword">val</span> ipPrefix = hostIp.substring(<span class="number">0</span>, hostIp.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        thread &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">val</span> dp = DatagramPacket(ByteArray(<span class="number">0</span>), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">var</span> socket: DatagramSocket = DatagramSocket()</span><br><span class="line">                <span class="keyword">var</span> position: <span class="built_in">Int</span> = start</span><br><span class="line">                <span class="comment">// 发送udp包，发通则该ip 存在设备</span></span><br><span class="line">                <span class="keyword">while</span> (position &lt;= end) &#123;</span><br><span class="line">                    dp.address = InetAddress.getByName(<span class="string">"<span class="variable">$ipPrefix</span><span class="variable">$position</span>"</span>)</span><br><span class="line">                    socket.send(dp)</span><br><span class="line">                    position++</span><br><span class="line">                    <span class="comment">// 分两段掉包，一次性发的话，达到236左右，会耗时3秒左右再往下发</span></span><br><span class="line">                    <span class="keyword">if</span> (position == start + (end-start) / <span class="number">2</span>) &#123;</span><br><span class="line">                        socket = DatagramSocket()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                socket.close()</span><br><span class="line">                <span class="comment">// 获取到arp</span></span><br><span class="line">                <span class="keyword">val</span> list = catArp()</span><br><span class="line">                <span class="comment">// 过滤</span></span><br><span class="line">                <span class="keyword">for</span>(i <span class="keyword">in</span> list)&#123;</span><br><span class="line">                    <span class="keyword">val</span> ipSuffix = i.value.split(<span class="string">'.'</span>).last().toInt()</span><br><span class="line">                    <span class="comment">// 不在范围内，移除</span></span><br><span class="line">                    <span class="keyword">if</span>(ipSuffix &lt; start || ipSuffix &gt; end)&#123;</span><br><span class="line">                        list.remove(i.key)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                CB(list)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">                Log.e(<span class="string">"IP扫描"</span>, <span class="string">"扫描报错：<span class="subst">$&#123;e.message.toString()&#125;</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取 arp表</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">arp</span><span class="params">()</span></span>: HashMap&lt;String, String&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> list: HashMap&lt;String, String&gt; = HashMap()</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> exec = Runtime.getRuntime().exec(<span class="string">"cat proc/net/arp"</span>)</span><br><span class="line">            <span class="keyword">val</span> br = BufferedReader(InputStreamReader(exec.inputStream))</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">val</span> line = br.readLine()</span><br><span class="line">                <span class="comment">// 过滤</span></span><br><span class="line">                <span class="keyword">if</span> (line != <span class="literal">null</span> &amp;&amp; !line.contains(<span class="string">"00:00:00:00:00:00"</span>) &amp;&amp; !line.contains(<span class="string">"IP"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">val</span> str = line.split(<span class="string">"\\s+"</span>.toRegex())</span><br><span class="line">                    <span class="keyword">val</span> ip:String = str[<span class="number">3</span>]</span><br><span class="line">                    <span class="keyword">val</span> mac = str[<span class="number">0</span>]</span><br><span class="line">                    list[ip] = mac</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (line != <span class="literal">null</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            Log.e(<span class="string">"IP扫描"</span>, <span class="string">"读取ARP报错：<span class="subst">$&#123;e.message.toString()&#125;</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一次项目中的需求，获取安卓设备所在局域网的其他设备的IP和MAC地址&lt;br&gt;通过查询资料，发现几种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shell&lt;/code&gt; 执行 &lt;code&gt;ping&lt;/code&gt; 的形式，通了则存在设备&lt;ul&gt;
&lt;li&gt;耗时&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arp -a&lt;/code&gt; 查询路由表&lt;ul&gt;
&lt;li&gt;安卓不支持此命令，只能通过查询文件代替&lt;code&gt;cat proc/net/arp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不能确保最新     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过发送个&lt;code&gt;udp&lt;/code&gt;包，再拿到最新的&lt;code&gt;arp&lt;/code&gt;表&lt;ul&gt;
&lt;li&gt;发通了则存在设备（不用管接收的设备是否处理&lt;code&gt;udp&lt;/code&gt;包）&lt;/li&gt;
&lt;li&gt;本文采用此方式实现&lt;/li&gt;
&lt;li&gt;只需1-2秒时间，就能获取局域网设备IP和MAC地址    &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="https://lecoler.github.io/categories/Android/"/>
    
    
      <category term="IP" scheme="https://lecoler.github.io/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>安卓阿里oss简易的文件上传</title>
    <link href="https://lecoler.github.io/2020/09/15/Android-aliOss/"/>
    <id>https://lecoler.github.io/2020/09/15/Android-aliOss/</id>
    <published>2020-09-15T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.781Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次使用阿里oss的文件上传功能，简易版<br>配合<code>okhttp3</code>实现，没使用阿里配套的sdk       </p><a id="more"></a><p>文件上传有PUT和POST，这里使用的是PUT  </p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p><code>implementation(&quot;com.squareup.okhttp3:okhttp:4.8.0&quot;)</code></p><h3 id="生成GMT格式时间"><a href="#生成GMT格式时间" class="headerlink" title="生成GMT格式时间"></a>生成GMT格式时间</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getGMTDate</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> cd = Calendar.getInstance()</span><br><span class="line">    <span class="keyword">val</span> sdf = SimpleDateFormat(<span class="string">"EEE, dd MMM yyyy HH:mm:ss 'GMT'"</span>, Locale.US)</span><br><span class="line">    sdf.timeZone = TimeZone.getTimeZone(<span class="string">"GMT"</span>)</span><br><span class="line">    <span class="keyword">return</span> sdf.format(cd.time)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hmac-Sha1-加密"><a href="#Hmac-Sha1-加密" class="headerlink" title="Hmac-Sha1 加密"></a>Hmac-Sha1 加密</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sha1</span><span class="params">(string: <span class="type">String</span>, key: <span class="type">String</span>)</span></span>: ByteArray &#123;</span><br><span class="line">    <span class="keyword">val</span> algorithm = <span class="string">"HmacSHA1"</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span> = string.toByteArray(Charsets.UTF_8)</span><br><span class="line">    <span class="keyword">val</span> secretKeySpec = SecretKeySpec(key.toByteArray(Charsets.UTF_8), algorithm)</span><br><span class="line">    <span class="keyword">val</span> mac = Mac.getInstance(algorithm)</span><br><span class="line">    mac.<span class="keyword">init</span>(secretKeySpec)</span><br><span class="line">    <span class="keyword">return</span> mac.doFinal(<span class="keyword">data</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Base64-加密"><a href="#Base64-加密" class="headerlink" title="Base64 加密"></a>Base64 加密</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">base64</span><span class="params">(byteArray: <span class="type">ByteArray</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> Base64.getEncoder().encodeToString(byteArray)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简易的PUT-上传文件"><a href="#简易的PUT-上传文件" class="headerlink" title="简易的PUT 上传文件"></a>简易的PUT 上传文件</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> BaseUrl = <span class="string">"http://BucketName.oss-cn-shenzhen.aliyuncs.com"</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> BucketName = <span class="string">"test"</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> AccessKeyID = <span class="string">"*****"</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> AccessKeySecret = <span class="string">"*****"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> Oss&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> Authorization 签名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span> lecoler</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> date:String GMT格式的时间</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> key:String  上传Object的名称</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> String     签名</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sign</span><span class="params">(date: <span class="type">String</span>, key: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> value = <span class="string">"PUT\n\napplication/octet-stream\n<span class="variable">$date</span>\n/<span class="variable">$BucketName</span>/<span class="variable">$key</span>"</span></span><br><span class="line">        <span class="keyword">return</span> base64(sha1(value, AccessKeySecret))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> 上传文件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span> lecoler</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> file:File    需要上传的文体</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> key:String   上传Object的名称。</span></span><br><span class="line"><span class="comment">      *                     如果名称包含路径，例如a/b/c/b.jpg，则OSS会自动创建相应的文件夹。</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">upload</span><span class="params">(file: <span class="type">File</span>, key: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> GMT = getGMTDate()</span><br><span class="line">        <span class="keyword">val</span> fileBody = RequestBody.create(<span class="string">"application/octet-stream"</span>.toMediaTypeOrNull(), file)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建请求</span></span><br><span class="line">        <span class="keyword">val</span> client = OkHttpClient()</span><br><span class="line">        client.newCall(</span><br><span class="line">            Request.Builder()</span><br><span class="line">            .url(<span class="string">"<span class="variable">$BaseUrl</span>/<span class="variable">$key</span>"</span>)</span><br><span class="line">            .method(<span class="string">"PUT"</span>, fileBody)</span><br><span class="line">            .addHeader(<span class="string">"Date"</span>, GMT)</span><br><span class="line">            .addHeader(<span class="string">"Authorization"</span>, <span class="string">"OSS <span class="variable">$AccessKeyID</span>:<span class="subst">$&#123;sign(GMT, key)&#125;</span>"</span>)</span><br><span class="line">            .build()</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        .enqueue(<span class="keyword">object</span> : Callback &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(call: <span class="type">Call</span>, e: <span class="type">IOException</span>)</span></span> &#123;</span><br><span class="line">                Log.e(<span class="string">"OSS"</span>,<span class="string">"OSS PutObject 上传报错：<span class="subst">$&#123;e.message&#125;</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(call: <span class="type">Call</span>, response: <span class="type">Response</span>)</span></span> &#123;</span><br><span class="line">                Log.i(<span class="string">"OSS"</span>,response.toString())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DOME"><a href="#DOME" class="headerlink" title="DOME"></a>DOME</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> file = File(<span class="string">"abc.txt"</span>)</span><br><span class="line">Oss.upload(file,<span class="string">"Android/20200916/abc.txt"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一次使用阿里oss的文件上传功能，简易版&lt;br&gt;配合&lt;code&gt;okhttp3&lt;/code&gt;实现，没使用阿里配套的sdk       &lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://lecoler.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://lecoler.github.io/tags/Android/"/>
    
      <category term="oss" scheme="https://lecoler.github.io/tags/oss/"/>
    
  </entry>
  
  <entry>
    <title>Android重启App应用</title>
    <link href="https://lecoler.github.io/2020/09/14/Android-rebootApp/"/>
    <id>https://lecoler.github.io/2020/09/14/Android-rebootApp/</id>
    <published>2020-09-14T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.781Z</updated>
    
    <content type="html"><![CDATA[<p>最近有个需求，要求能在应用崩溃时，重启App应用<br>特此记录下     </p><a id="more"></a><h3 id="重启App"><a href="#重启App" class="headerlink" title="重启App"></a>重启App</h3><p>Kotlin</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> app = <span class="keyword">this</span>.applicationContext</span><br><span class="line"><span class="keyword">val</span> context = <span class="keyword">this</span>.baseContext</span><br><span class="line"><span class="keyword">val</span> intent = context.packageManager.getLaunchIntentForPackage(context.packageName)</span><br><span class="line">intent?.putExtra(<span class="string">"REBOOT"</span>, <span class="string">"reboot"</span>)</span><br><span class="line"><span class="keyword">val</span> pendingIntent = PendingIntent.getActivity(</span><br><span class="line">    app,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    intent,</span><br><span class="line">    PendingIntent.FLAG_ONE_SHOT</span><br><span class="line">)</span><br><span class="line"><span class="keyword">val</span> alarmManager = app.getSystemService(Context.ALARM_SERVICE) <span class="keyword">as</span> AlarmManager</span><br><span class="line"><span class="comment">// 1秒后启动</span></span><br><span class="line">alarmManager.<span class="keyword">set</span>(AlarmManager.RTC, System.currentTimeMillis() + <span class="number">1000</span>, pendingIntent)</span><br><span class="line">android.os.Process.killProcess(android.os.Process.myPid())</span><br></pre></td></tr></table></figure><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext app = getApplicationContext();</span><br><span class="line">Context context = getBaseContext();</span><br><span class="line">Intent intent = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName());</span><br><span class="line"><span class="comment">// 带参数</span></span><br><span class="line">intent.putExtra(<span class="string">"REBOOT"</span>,<span class="string">"reboot"</span>);</span><br><span class="line">PendingIntent pendingIntent = PendingIntent.getActivity(app, <span class="number">0</span>, intent, PendingIntent.FLAG_ONE_SHOT);</span><br><span class="line">AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);</span><br><span class="line"><span class="comment">// 1秒后启动</span></span><br><span class="line">alarmManager.set(AlarmManager.RTC, System.currentTimeMillis() + <span class="number">1000</span>, pendingIntent);</span><br><span class="line">android.os.Process.killProcess(android.os.Process.myPid());</span><br></pre></td></tr></table></figure><h3 id="全局捕获错误"><a href="#全局捕获错误" class="headerlink" title="全局捕获错误"></a>全局捕获错误</h3><p>基于 <code>Thread.UncaughtExceptionHandler</code> 类可实现捕获错误，避免App应用崩溃停止运行  </p><p>例如</p><p>复写<code>Thread.UncaughtExceptionHandler</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrashHandler</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> app: Context) : Thread.UncaughtExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">uncaughtException</span><span class="params">(t: <span class="type">Thread</span>, e: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line">        <span class="keyword">val</span> stackTrace = e.stackTrace</span><br><span class="line">        <span class="keyword">val</span> targetStackTrace: StackTraceElement? = stackTrace.first()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (targetStackTrace != <span class="literal">null</span>) &#123;</span><br><span class="line">            Log.e(</span><br><span class="line">                <span class="string">"程序崩溃错误"</span>,</span><br><span class="line">                <span class="string">"线程：<span class="subst">$&#123;t.name&#125;</span>\n位置：<span class="subst">$&#123;targetStackTrace.className&#125;</span>.<span class="subst">$&#123;targetStackTrace.methodName&#125;</span>(<span class="subst">$&#123;targetStackTrace.fileName&#125;</span>:<span class="subst">$&#123;targetStackTrace.lineNumber&#125;</span>)\n报错信息：<span class="subst">$&#123;e.message ?: e.toString()&#125;</span>"</span></span><br><span class="line">            )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.e(<span class="string">"程序崩溃错误"</span>, e.message ?: <span class="string">"未知"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于全局里设置默认错误捕获处理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> : <span class="type">Application</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate()</span><br><span class="line">        <span class="comment">// 设置全局错误捕获拦截</span></span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(CrashHandler(applicationContext))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有个需求，要求能在应用崩溃时，重启App应用&lt;br&gt;特此记录下     &lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://lecoler.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://lecoler.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>css垂直水平居住实现方法</title>
    <link href="https://lecoler.github.io/2020/06/22/css%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E5%AE%9E%E7%8E%B0/"/>
    <id>https://lecoler.github.io/2020/06/22/css垂直水平居中实现/</id>
    <published>2020-06-22T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.785Z</updated>
    
    <content type="html"><![CDATA[<p>css实现垂直水平都居中的方法汇总，都是自己亲手实践过的     </p><a id="more"></a><h3 id="方法一（height、line-height、text-align）"><a href="#方法一（height、line-height、text-align）" class="headerlink" title="方法一（height、line-height、text-align）"></a>方法一（height、line-height、text-align）</h3><p>使用height、line-height 设置相同值，配和text-align设置居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">**缺点：固定高度，无法实现两行文本的居中**</span><br><span class="line"></span><br><span class="line">### 方法二（<span class="selector-tag">position</span>、<span class="selector-tag">margin</span>：负值）</span><br><span class="line">父元素设置`<span class="selector-tag">position</span>: <span class="selector-tag">relative</span>`，使用`<span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>`，配合<span class="selector-tag">margin</span>负值食用。</span><br><span class="line">```<span class="selector-tag">css</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*简化*/</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 50px);</span><br><span class="line">    <span class="attribute">left</span>: <span class="built_in">calc</span>(50% - 50px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：需配合父元素食用，固定高度，高度无法自适应内容。元素脱离文档流</strong>  </p><h3 id="方法三（position、margin：auto）"><a href="#方法三（position、margin：auto）" class="headerlink" title="方法三（position、margin：auto）"></a>方法三（position、margin：auto）</h3><p>父元素设置<code>position: relative</code>，使用<code>position: absolute</code>，配合<code>margin: auto</code>食用。  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：需配合父元素食用，元素脱离文档流</strong>  </p><h3 id="方法四（position、transform-translate）"><a href="#方法四（position、transform-translate）" class="headerlink" title="方法四（position、transform: translate）"></a>方法四（position、transform: translate）</h3><p>父元素设置<code>position: relative</code>，使用<code>position: absolute</code>，配合<code>transform: translate()</code>食用。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">**缺点：需配合父元素食用，元素脱离文档流**  </span><br><span class="line"></span><br><span class="line">### 方法五（<span class="selector-tag">display</span>: <span class="selector-tag">table-cell</span>）</span><br><span class="line">将父元素<span class="selector-tag">display</span>改成<span class="selector-tag">table</span>表格的形式，再配合`<span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>`食用。  </span><br><span class="line">（即，以表格单元格实现居中）   </span><br><span class="line">```<span class="selector-tag">html</span></span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.iBox</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="box"&gt;</span><br><span class="line">        &lt;div class="iBox"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>缺点：改变了父元素的display属性。IE6-7不支持<code>display:table-cell</code></strong></p><h3 id="方法六（flex）推荐！！！"><a href="#方法六（flex）推荐！！！" class="headerlink" title="方法六（flex）推荐！！！"></a>方法六（flex）推荐！！！</h3><p>flex布局（伸缩布局盒模型，也叫弹性布局盒模型）  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="comment">/*兼容 IE11*/</span></span><br><span class="line">    <span class="attribute">display</span>: -ms-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：兼容问题，不支持IE11以下（不包括11）</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css实现垂直水平都居中的方法汇总，都是自己亲手实践过的     &lt;/p&gt;
    
    </summary>
    
      <category term="随手记" scheme="https://lecoler.github.io/categories/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="css" scheme="https://lecoler.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>滚动条默认样式修改</title>
    <link href="https://lecoler.github.io/2020/05/21/-webkit-scrollbar/"/>
    <id>https://lecoler.github.io/2020/05/21/-webkit-scrollbar/</id>
    <published>2020-05-21T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.781Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器默认滚动条样式修改；<br>微信小程序隐藏滚动条  </p><a id="more"></a><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*滚动条整体部分*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*滚动条两端的按钮*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-button</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*外层轨道*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-track</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*内层轨道*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-track-piece</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 滚动条拖动部分*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*边角*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-corner</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*右下角拖动块*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-resizer</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="dome"><a href="#dome" class="headerlink" title="dome"></a>dome</h4><img src="/2020/05/21/-webkit-scrollbar/dome.png" title="This is an dome image"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*滚动条整体*/</span></span><br><span class="line"><span class="selector-class">.dome</span><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;     </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dome</span><span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,0.2);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#96C2F1</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">        45deg,</span><br><span class="line">        rgba(255, 255, 255, 0.2) <span class="number">25%</span>,</span><br><span class="line">        transparent <span class="number">25%</span>,</span><br><span class="line">        transparent <span class="number">50%</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(255, 255, 255, 0.2) <span class="number">50%</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(255, 255, 255, 0.2) <span class="number">75%</span>,</span><br><span class="line">        transparent <span class="number">75%</span>,</span><br><span class="line">        transparent</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dome</span><span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.1);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#EFF7FF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><p>移除滚动条 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器默认滚动条样式修改；&lt;br&gt;微信小程序隐藏滚动条  &lt;/p&gt;
    
    </summary>
    
      <category term="随手记" scheme="https://lecoler.github.io/categories/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="css" scheme="https://lecoler.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>AssemblyScript 初次使用</title>
    <link href="https://lecoler.github.io/2020/03/03/AssemblyScript/"/>
    <id>https://lecoler.github.io/2020/03/03/AssemblyScript/</id>
    <published>2020-03-03T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.781Z</updated>
    
    <content type="html"><![CDATA[<p><code>AssemblyScript</code> </p><a id="more"></a><p>记一次<code>AssemblyScript</code> 的使用记录,</p><p> <a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noopener">AssemblyScript</a> 是使用  <a href="https://github.com/WebAssembly/binaryen" target="_blank" rel="noopener">Binaryen</a> 将   <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a>  编译成   <a href="https://webassembly.org/" target="_blank" rel="noopener">WebAssembly</a> </p><!--more--><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>WebAssembly 是一种接近机器语言的跨平台二进制格式。2017年3月份，四大主流浏览器厂商 Google Chrome、Apple Safari、Microsoft Edge 和 Mozilla FireFox 均宣布已经于最新版本的浏览器中支持了 WebAssembly</p><p> <a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noopener">AssemblyScript</a> 是使用  <a href="https://github.com/WebAssembly/binaryen" target="_blank" rel="noopener">Binaryen</a> 将   <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a>  编译成   <a href="https://webassembly.org/" target="_blank" rel="noopener">WebAssembly</a> </p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i assemblyscript -D</span><br></pre></td></tr></table></figure><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx asinit .</span><br></pre></td></tr></table></figure><p>自动生成</p><ul><li><p><code>assembly/index.ts</code>  入口文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// The entry file of your WebAssembly module.export </span><br><span class="line">function add(a: i32, b: i32): i32 &#123;  </span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>build</code>目录 编译后 <code>wasm</code>文件存放</p></li></ul><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run asbuild</span><br></pre></td></tr></table></figure><h2 id="node下使用"><a href="#node下使用" class="headerlink" title="node下使用"></a>node下使用</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>脚手架会自动生成引入文件<code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="comment">// 加载wasm模块</span></span><br><span class="line"><span class="keyword">const</span> compiled = <span class="keyword">new</span> WebAssembly.Module(fs.readFileSync(__dirname + <span class="string">"/build/optimized.wasm"</span>));</span><br><span class="line"><span class="keyword">const</span> imports = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">module</span>, <span class="string">"exports"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: () =&gt; new WebAssembly.Instance(compiled, imports).exports</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>新建个<code>js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; add &#125; = <span class="built_in">require</span>(<span class="string">'./index.js'</span>);</span><br><span class="line"><span class="keyword">const</span> sum = add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// node运行输出: 2</span></span><br></pre></td></tr></table></figure><h2 id="浏览器下使用"><a href="#浏览器下使用" class="headerlink" title="浏览器下使用"></a>浏览器下使用</h2><h3 id="引用-1"><a href="#引用-1" class="headerlink" title="引用"></a>引用</h3><p>新建个<code>js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装 https://github.com/torch2424/wasm-by-example/blob/master/demo-util/</span></span><br><span class="line"><span class="keyword">const</span> wasmBrowserInstantiate = <span class="keyword">async</span> (wasmModuleUrl, importObject) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!importObject) &#123;</span><br><span class="line">        importObject = &#123;</span><br><span class="line">            env: &#123;</span><br><span class="line">                abort: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Abort!"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if the browser supports streaming instantiation</span></span><br><span class="line">    <span class="keyword">if</span> (WebAssembly.instantiateStreaming) &#123;</span><br><span class="line">        <span class="comment">// Fetch the module, and instantiate it as it is downloading</span></span><br><span class="line">        response = <span class="keyword">await</span> WebAssembly.instantiateStreaming(</span><br><span class="line">            fetch(wasmModuleUrl),</span><br><span class="line">            importObject</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Fallback to using fetch to download the entire module</span></span><br><span class="line">        <span class="comment">// And then instantiate the module</span></span><br><span class="line">        <span class="keyword">const</span> fetchAndInstantiateTask = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> wasmArrayBuffer = <span class="keyword">await</span> fetch(wasmModuleUrl).then(<span class="function"><span class="params">response</span> =&gt;</span></span><br><span class="line">                                                                    response.arrayBuffer()</span><br><span class="line">                                                                   );</span><br><span class="line">            <span class="keyword">return</span> WebAssembly.instantiate(wasmArrayBuffer, importObject);</span><br><span class="line">        &#125;;</span><br><span class="line">        response = <span class="keyword">await</span> fetchAndInstantiateTask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用</span></span><br><span class="line"><span class="keyword">let</span> wasmModule;</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Instantiate our wasm module</span></span><br><span class="line">    wasmModule = <span class="keyword">await</span> wasmBrowserInstantiate(<span class="string">'./build/optimized.wasm'</span>);</span><br><span class="line">    <span class="keyword">return</span> wasmModule;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>新建个<code>html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>dome<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>=<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"sum"</span>&gt;</span>?<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> a = <span class="built_in">document</span>.getElementById(<span class="string">'a'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> b = <span class="built_in">document</span>.getElementById(<span class="string">'b'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> sum = <span class="built_in">document</span>.getElementById(<span class="string">'sum'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="javascript">            btn.addEventListener(<span class="string">'click'</span>, click);</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> result = wasmModule.instance.exports.add(<span class="built_in">parseFloat</span>(a.value), <span class="built_in">parseFloat</span>(b.value));</span></span><br><span class="line">                sum.innerText = result;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;AssemblyScript&lt;/code&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="WebAssembly" scheme="https://lecoler.github.io/categories/WebAssembly/"/>
    
    
      <category term="AssemblyScript" scheme="https://lecoler.github.io/tags/AssemblyScript/"/>
    
  </entry>
  
  <entry>
    <title>安卓开发——笔记（1）</title>
    <link href="https://lecoler.github.io/2020/02/29/Android-note(1)/"/>
    <id>https://lecoler.github.io/2020/02/29/Android-note(1)/</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.781Z</updated>
    
    <content type="html"><![CDATA[<p>记录安卓开发时，所遇到的问题及方法           </p><a id="more"></a><h3 id="调试输出"><a href="#调试输出" class="headerlink" title="调试输出"></a>调试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line">Log.v(<span class="string">"a"</span>, <span class="string">"Haha , this is a Verbose of MyAndroid. "</span>);</span><br><span class="line">Log.d(<span class="string">"a"</span>, <span class="string">"Haha , this is a Debug of MyAndroid. "</span>);</span><br><span class="line">Log.i(<span class="string">"a"</span>, <span class="string">"Haha , this is a Info of MyAndroid. "</span>);</span><br><span class="line">Log.w(<span class="string">"a"</span>, <span class="string">"Haha , this is a Warning of MyAndroid. "</span>);</span><br><span class="line">Log.e(<span class="string">"a"</span>, <span class="string">"Haha , this is a Error of MyAndroid. "</span>);</span><br></pre></td></tr></table></figure><h3 id="点击事件获取文本内容"><a href="#点击事件获取文本内容" class="headerlink" title="点击事件获取文本内容"></a>点击事件获取文本内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> TextView value = (TextView) findViewById(R.id.textView);</span><br><span class="line"></span><br><span class="line">Button btn = <span class="keyword">new</span> Button(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//绑定点击事件</span></span><br><span class="line">btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        String text = ((Button) v).getText().toString();</span><br><span class="line">        value.setText(value.getText()+text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="在xml里绑定事件并传参数"><a href="#在xml里绑定事件并传参数" class="headerlink" title="在xml里绑定事件并传参数"></a>在<code>xml</code>里绑定事件并传参数</h3><p><code>xml</code>部分代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"click"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:tag</span>=<span class="string">"params"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>java</code>部分代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">    String param = view.getTag().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用res里的资源，类型变为-View"><a href="#引用res里的资源，类型变为-View" class="headerlink" title="引用res里的资源，类型变为 View"></a>引用res里的资源，类型变为 <code>View</code></h3><p>通过加载器 <code>LayoutInflater</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflater tableItem = LayoutInflater.from(<span class="keyword">this</span>);</span><br><span class="line">View viewItem = tableItem.inflate(R.layout.fbutton_item, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="handler发送消息-线程间通讯"><a href="#handler发送消息-线程间通讯" class="headerlink" title="handler发送消息(线程间通讯)"></a>handler发送消息(线程间通讯)</h3><p>子线程里无法调用ui，通过handler发送消息至ui线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHOW_TOAST = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">null</span>;    </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">    msg.what = SHOW_TOAST;</span><br><span class="line">    msg.obj = <span class="string">"信息"</span>;</span><br><span class="line">    mHandler.sendMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what)&#123;</span><br><span class="line">            <span class="keyword">case</span> SHOW_TOAST:</span><br><span class="line">                String text = msg.obj.toString();</span><br><span class="line">                Toast toast = Toast.makeText(getApplicationContext(), text, Toast.LENGTH_LONG);</span><br><span class="line">                toast.setGravity(Gravity.CENTER, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                toast.show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unexpected value: "</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="广播事件"><a href="#广播事件" class="headerlink" title="广播事件"></a>广播事件</h3><p><strong>Tip:</strong></p><ul><li>可一个接收器 对应多个 action ( 用 intent-filter 包裹) 或 多个接收器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".MyBroadcastReceiver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BOOT_COMPLETED"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.DOWNLOAD_COMPLETE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="将数据写入本地缓存"><a href="#将数据写入本地缓存" class="headerlink" title="将数据写入本地缓存"></a>将数据写入本地缓存</h3><p>用 <code>SharedPreferences</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SharedPreferences sf;</span><br><span class="line"><span class="keyword">private</span> SharedPreferences.Editor edit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 链接库</span></span><br><span class="line">    sf = getSharedPreferences(getResources().getString(R.string.app_name), Context.MODE_PRIVATE);</span><br><span class="line">    <span class="comment">// 编辑器</span></span><br><span class="line">    edit = sf.edit();</span><br><span class="line">    <span class="comment">// set 值</span></span><br><span class="line">    edit.putString(<span class="string">"key"</span>,<span class="string">"value"</span>);</span><br><span class="line">    edit.commit();</span><br><span class="line">    <span class="comment">// get 值</span></span><br><span class="line">    sf.getString(<span class="string">"key"</span>,<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="播放mp3音频"><a href="#播放mp3音频" class="headerlink" title="播放mp3音频"></a>播放mp3音频</h3><ul><li>在<code>main</code>目录下 新建个 <code>assets</code>目录 存放<code>mp3</code>音频</li><li>用 <code>MediaPlayer</code> 播放音频</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> MediaPlayer musicPlay = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> AssetManager assetManager = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> List&lt;AssetFileDescriptor&gt; musicQueue = <span class="keyword">new</span> ArrayList&lt;AssetFileDescriptor&gt;();</span><br><span class="line"><span class="comment">// 初始化播放器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPlayer</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取asset文件管理器</span></span><br><span class="line">    assetManager = context.getAssets();</span><br><span class="line">    <span class="comment">// new 播放器</span></span><br><span class="line">    musicPlay = <span class="keyword">new</span> MediaPlayer();</span><br><span class="line">    <span class="comment">// 播放结束监听</span></span><br><span class="line">    musicPlay.setOnCompletionListener(<span class="keyword">new</span> MediaPlayer.OnCompletionListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 存在播放队列</span></span><br><span class="line">            <span class="keyword">if</span> (musicQueue.size() != <span class="number">0</span>) &#123;</span><br><span class="line">                play(musicQueue.get(<span class="number">0</span>));</span><br><span class="line">                musicQueue.remove(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始播放</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(AssetFileDescriptor music)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 存在播放任务,追加队列中</span></span><br><span class="line">        <span class="keyword">if</span> (musicPlay.isPlaying()) &#123;</span><br><span class="line">            musicQueue.add(music);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重置播放器</span></span><br><span class="line">        musicPlay.reset();</span><br><span class="line">        <span class="comment">// 设置播放资源</span></span><br><span class="line">        musicPlay.setDataSource(music.getFileDescriptor(), music.getStartOffset(), music.getLength());</span><br><span class="line">        <span class="comment">// 预加载</span></span><br><span class="line">        musicPlay.prepare();</span><br><span class="line">        <span class="comment">// 开始</span></span><br><span class="line">        musicPlay.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择播放音频</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectMusic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 播放 test.mp3</span></span><br><span class="line">        <span class="keyword">this</span>.play(assetManager.openFd(<span class="string">"test.mp3"</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析JSON"><a href="#解析JSON" class="headerlink" title="解析JSON"></a>解析JSON</h3><ul><li>用 阿里的 <code>fastjson</code></li></ul><p>app 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">implementation &apos;com.alibaba:fastjson:1.2.62&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单dome</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引</span></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">JSONObject data = JSONObject.parseObject(res);</span><br><span class="line">String type = data.getString(<span class="string">"type"</span>);</span><br></pre></td></tr></table></figure><h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a><code>socket</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接 socket</span></span><br><span class="line">socket = <span class="keyword">new</span> Socket(SOCKET_IP, SOCKET_PORT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建IO</span></span><br><span class="line">InputStream is = socket.getInputStream();</span><br><span class="line">OutputStream os = socket.getOutputStream();</span><br><span class="line">bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(os));</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取服务器返回的消息</span></span><br><span class="line">br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line"></span><br><span class="line"><span class="comment">//向服务器端发送一条消息</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    bw.write(<span class="string">"msg"</span> + <span class="string">"\n"</span>);</span><br><span class="line">    bw.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持续读消息</span></span><br><span class="line">String res;</span><br><span class="line"><span class="keyword">while</span> ((res = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 当读到消息 do something              </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="弹窗AlertDialog"><a href="#弹窗AlertDialog" class="headerlink" title="弹窗AlertDialog"></a>弹窗<code>AlertDialog</code></h3><p>基本用法</p><ul><li>setTitle ：为对话框设置标题</li><li>setIcon ：为对话框设置图标</li><li>setMessage：为对话框设置内容</li><li>setView ： 给对话框设置自定义样式</li><li>setItems ：设置对话框要显示的一个list，一般用于显示几个命令时</li><li>setMultiChoiceItems ：用来设置对话框显示一系列的复选框</li><li>setSingleChoiceItems ：用来设置对话框显示一系列的单选框</li><li>setNeutralButton    ：普通按钮</li><li>setPositiveButton   ：给对话框添加”Yes”按钮</li><li>setNegativeButton ：对话框添加”No”按钮</li><li>create ： 创建对话框</li><li>show ：显示对话框</li></ul><p>dome</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">builder.setTitle(<span class="string">"这是标题"</span>)</span><br><span class="line">    .setMessage(<span class="string">"这是内容"</span>)</span><br><span class="line">    .setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">null</span>)</span><br><span class="line">    .create();</span><br><span class="line"></span><br><span class="line">builder.setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">builder.show();</span><br></pre></td></tr></table></figure><h3 id="打开跳转至无障碍设置页面"><a href="#打开跳转至无障碍设置页面" class="headerlink" title="打开跳转至无障碍设置页面"></a>打开跳转至无障碍设置页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line"><span class="keyword">this</span>.getApplicationContext().startActivity(intent);</span><br></pre></td></tr></table></figure><h3 id="通过shell静默开启无障碍模式"><a href="#通过shell静默开启无障碍模式" class="headerlink" title="通过shell静默开启无障碍模式"></a>通过shell静默开启无障碍模式</h3><ul><li>root权限</li></ul><p>开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 包名/程序名</span></span><br><span class="line">String myAs = <span class="keyword">this</span>.getPackageName() + <span class="string">"/"</span> + MainAccessibilityService.class.getName();</span><br><span class="line"><span class="comment">// 获取目前设置无障碍模式的app</span></span><br><span class="line">String nowAs = shellExec(<span class="string">"settings get secure enabled_accessibility_services"</span>);</span><br><span class="line">nowAs.replace(<span class="string">"\n"</span>, <span class="string">""</span>);</span><br><span class="line"><span class="comment">// 目前存在其它时,追加 : 隔开</span></span><br><span class="line"><span class="keyword">if</span> (nowAs.length() &gt; <span class="number">1</span> &amp;&amp; !nowAs.contains(myAs)) &#123;</span><br><span class="line">    nowAs = <span class="string">":"</span> + nowAs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不存在时,即设置.存在直接启动</span></span><br><span class="line"><span class="keyword">if</span>(!nowAs.contains(myAs))&#123;</span><br><span class="line">    String cmd = <span class="string">"settings put secure enabled_accessibility_services "</span> + myAs + nowAs;</span><br><span class="line">    shellExec(cmd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line">shellExec(<span class="string">"settings put secure accessibility_enabled 1"</span>);</span><br></pre></td></tr></table></figure><p>关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 包名/程序名</span></span><br><span class="line">String myAs = <span class="keyword">this</span>.getPackageName() + <span class="string">"/"</span> + MainAccessibilityService.class.getName();</span><br><span class="line"><span class="comment">// 获取目前的配置</span></span><br><span class="line">String nowAs = shellExec(<span class="string">"settings get secure enabled_accessibility_services"</span>);</span><br><span class="line">nowAs.replace(<span class="string">"\n"</span>, <span class="string">""</span>);</span><br><span class="line"><span class="comment">// 找到需关闭的程序对应下标</span></span><br><span class="line"><span class="keyword">int</span> index = nowAs.indexOf(myAs);</span><br><span class="line"><span class="comment">// 找到后</span></span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 前面的 : 下标</span></span><br><span class="line">    <span class="keyword">int</span> beforeIndex = nowAs.lastIndexOf(<span class="string">":"</span>, index);</span><br><span class="line">    <span class="comment">// 后面的 : 下标</span></span><br><span class="line">    <span class="keyword">int</span> afterIndex = nowAs.indexOf(<span class="string">":"</span>, index);</span><br><span class="line">    <span class="comment">// 判断下,得到 需关闭程序+: 的头尾 下标</span></span><br><span class="line">    <span class="keyword">if</span> (beforeIndex &lt; <span class="number">0</span>) beforeIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (afterIndex &lt; <span class="number">0</span>) afterIndex = nowAs.length();</span><br><span class="line">    <span class="keyword">else</span> afterIndex++;</span><br><span class="line">    <span class="comment">// 截取</span></span><br><span class="line">    String As = nowAs.substring(<span class="number">0</span>, beforeIndex) + nowAs.substring(afterIndex, nowAs.length());</span><br><span class="line">    <span class="comment">// 判断是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (As.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        shellExec(<span class="string">"settings put secure enabled_accessibility_services "</span> + As);</span><br><span class="line">        shellExec(<span class="string">"settings put secure accessibility_enabled 1"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        shellExec(<span class="string">"settings put secure enabled_accessibility_services ''"</span>);</span><br><span class="line">        shellExec(<span class="string">"settings put secure accessibility_enabled 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行shell-命令"><a href="#执行shell-命令" class="headerlink" title="执行shell 命令"></a>执行shell 命令</h3><p>简易版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">shellExec</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            Log.i(Tag, "start shell command");</span></span><br><span class="line"></span><br><span class="line">            Runtime runtime = Runtime.getRuntime();</span><br><span class="line">            Process process = runtime.exec(<span class="string">"su"</span>);</span><br><span class="line"></span><br><span class="line">            DataOutputStream os = <span class="keyword">new</span> DataOutputStream(process.getOutputStream());</span><br><span class="line"></span><br><span class="line">            os.write(cmd.getBytes());</span><br><span class="line">            os.writeBytes(<span class="string">"\n"</span>);</span><br><span class="line">            os.flush();</span><br><span class="line">            os.writeBytes(<span class="string">"exit\n"</span>);</span><br><span class="line">            os.flush();</span><br><span class="line"></span><br><span class="line">            BufferedReader successResult = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">            BufferedReader errorResult = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getErrorStream()));</span><br><span class="line"></span><br><span class="line">            String str;</span><br><span class="line">            <span class="keyword">while</span> ((str = errorResult.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                result.append(str + <span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ((str = successResult.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                result.append(str + <span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//            Log.i(Tag, result.toString());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            Log.i(Tag, "end shell");</span></span><br><span class="line">            os.close();</span><br><span class="line">            successResult.close();</span><br><span class="line">            errorResult.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="静默安装apk"><a href="#静默安装apk" class="headerlink" title="静默安装apk"></a>静默安装apk</h3><ul><li>root 权限</li><li><code>su</code> 下执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shell 运行命令</span></span><br><span class="line">shellExec(<span class="string">"pm install xxx/xxx.apk"</span>);</span><br><span class="line"><span class="comment">// 覆盖安装</span></span><br><span class="line">shellExec(<span class="string">"pm install -r xxx/xxx.apk"</span>);</span><br></pre></td></tr></table></figure><h3 id="调用系统安装apk-需手动点击安装"><a href="#调用系统安装apk-需手动点击安装" class="headerlink" title="调用系统安装apk (需手动点击安装)"></a>调用系统安装apk (需手动点击安装)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装路径</span></span><br><span class="line">String path = <span class="string">"xxx/xxx.apk"</span>;</span><br><span class="line">File file = <span class="keyword">new</span> File(path);</span><br><span class="line"><span class="comment">// 是否存在</span></span><br><span class="line"><span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">    Uri fileUri = Uri.fromFile(file);</span><br><span class="line">    <span class="comment">// 执行安装</span></span><br><span class="line">    Intent installIntent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">    installIntent.setDataAndType(fileUri, <span class="string">"application/vnd.android.package-archive"</span>);</span><br><span class="line">    installIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">    <span class="keyword">this</span>.startActivity(installIntent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><ul><li><p>字体单位 用 <code>sp</code></p></li><li><p>常用单位<code>dp</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录安卓开发时，所遇到的问题及方法           &lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://lecoler.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://lecoler.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>安卓adb调试</title>
    <link href="https://lecoler.github.io/2020/02/21/Android-adb/"/>
    <id>https://lecoler.github.io/2020/02/21/Android-adb/</id>
    <published>2020-02-21T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.781Z</updated>
    
    <content type="html"><![CDATA[<p>安卓adb调试<br>常用adb命令记录      </p><a id="more"></a><h3 id="通过局域网连接设备"><a href="#通过局域网连接设备" class="headerlink" title="通过局域网连接设备"></a>通过局域网连接设备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd Android</span><br><span class="line">cd Sdk</span><br><span class="line">cd platform-tools</span><br><span class="line">adb.exe connect xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><h3 id="安装apk"><a href="#安装apk" class="headerlink" title="安装apk"></a>安装apk</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb.exe -s 设备 install apk路径</span><br></pre></td></tr></table></figure><h5 id="覆盖安装"><a href="#覆盖安装" class="headerlink" title="覆盖安装"></a>覆盖安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb.exe -s 设备 install -r apk路径</span><br></pre></td></tr></table></figure><h3 id="卸载apk"><a href="#卸载apk" class="headerlink" title="卸载apk"></a>卸载apk</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb -s 设备 uninstall apk路径</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">adb shell pm uninstall 包名</span><br></pre></td></tr></table></figure><h3 id="重启设备"><a href="#重启设备" class="headerlink" title="重启设备"></a>重启设备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot</span><br></pre></td></tr></table></figure><h3 id="从设备下载文件"><a href="#从设备下载文件" class="headerlink" title="从设备下载文件"></a>从设备下载文件</h3><p><strong><em>前提：adb连接上设备</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull 设备文件路径 下载到本地路径</span><br></pre></td></tr></table></figure><p>e.g</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /data/logs/ D:/log/</span><br></pre></td></tr></table></figure><h3 id="上传文件至设备"><a href="#上传文件至设备" class="headerlink" title="上传文件至设备"></a>上传文件至设备</h3><p><strong><em>前提：adb连接上设备</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push 本地文件路径 设备路径</span><br></pre></td></tr></table></figure><p>e.g</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push D:/log/ /data/logs/</span><br></pre></td></tr></table></figure><h3 id="查看连接的设备列表"><a href="#查看连接的设备列表" class="headerlink" title="查看连接的设备列表"></a>查看连接的设备列表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices -l</span><br></pre></td></tr></table></figure><h3 id="启动连接设备上的App应用"><a href="#启动连接设备上的App应用" class="headerlink" title="启动连接设备上的App应用"></a>启动连接设备上的App应用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n 包名/Activity类目</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> e.g</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> adb shell am start -n com.example.test/com.example.test.MainActivity</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安卓adb调试&lt;br&gt;常用adb命令记录      &lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://lecoler.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://lecoler.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>安卓app开机启动</title>
    <link href="https://lecoler.github.io/2020/02/01/android-AppStartRun/"/>
    <id>https://lecoler.github.io/2020/02/01/android-AppStartRun/</id>
    <published>2020-02-01T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.781Z</updated>
    
    <content type="html"><![CDATA[<p>实现app开发，开机自启app，简易教程  </p><a id="more"></a><h2 id="安卓app开机启动"><a href="#安卓app开机启动" class="headerlink" title="安卓app开机启动"></a>安卓app开机启动</h2><p>项目需求要实现，程序随手机开机启动</p><p><strong>实现原理:</strong></p><p>Android系统在开机时，会向所有app发起广播，通知app已经开机了。因此，只需要接受拦截到这个广播就能实现开机自启。</p><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><ol><li><p>打开全局配置文件<code>AndroidManifest.xml</code></p></li><li><p>添加 <code>android:installLocation=&quot;internalOnly&quot;</code>将app安装在内存中，安装在sd卡不知道会不会影响广播信息的接受（暂时未验证）</p></li><li><p>添加开机自启权限<code>&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;</code></p></li><li><p>在<code>&lt;application&gt;&lt;/application&gt;</code>中添加，注册系统广播信息接受者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".MyBroadcastReceiver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BOOT_COMPLETED"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.HOME"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><ol><li><p>在<code>java/com.example.包名</code>中，新建<code>MyBroadcastReceiver</code>java程序</p></li><li><p>添加接受广播信息的处理方法<code>onReceive</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.包名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String ACTION_BOOT = <span class="string">"android.intent.action.BOOT_COMPLETED"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收广播消息后都会进入 onReceive 方法，然后要做的就是对相应的消息做出相应的处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 表示广播接收器所运行的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> intent  表示广播接收器收到的Intent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 如果 系统 启动的消息，则启动 APP 主页活动</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (ACTION_BOOT.equals(intent.getAction())) &#123;</span><br><span class="line">            Intent i = <span class="keyword">new</span> Intent(context, MainActivity.class);</span><br><span class="line">            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            context.startActivity(i);</span><br><span class="line">            Toast.makeText(context,<span class="string">"唤醒成功"</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>手机设置问题<code>手机管家</code>之类的程序可能会阻止app程序开机自启动</li><li>第一次安装app后，需手动启动，后续即可自启动</li><li>Android中规定了<code>BroadCastReceiver</code>不能处理复杂长时间的逻辑操作，如果在<code>onReceive</code>方法在<strong>10s</strong>内没法执行完毕，则系统会视之为未响应状态，可能会报ANR错误。可以将这些耗时操作放在Service中开辟子线程去执行。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现app开发，开机自启app，简易教程  &lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://lecoler.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://lecoler.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>安卓串口通讯（模拟机测试）</title>
    <link href="https://lecoler.github.io/2020/01/15/android-serialPort/"/>
    <id>https://lecoler.github.io/2020/01/15/android-serialPort/</id>
    <published>2020-01-15T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.781Z</updated>
    
    <content type="html"><![CDATA[<p>安卓串口通讯<br>Android studio模拟机模拟测试串口通讯，踩坑记录    </p><a id="more"></a><h1 id="Android-串口"><a href="#Android-串口" class="headerlink" title="Android 串口"></a>Android 串口</h1><p>需求安卓通过串口与硬件设备通讯交互</p><p>开源的 <code>android_serialport_api</code>库</p><h3 id="需要"><a href="#需要" class="headerlink" title="需要"></a>需要</h3><ul><li>Android studio  模拟机  <ul><li>不要下带<strong>Play Store</strong>(谷歌商店) ，会获取不到root权限的</li></ul></li><li>虚拟串口设备工具<ul><li>下载安装后，虚拟对 串口 <code>COM1-COM2</code>  (其他的也行，本文用<code>COM1-COM2</code>为例)</li><li>本文使用<code>Virtual Serial Port Driver Pro 9.0</code>  </li></ul></li><li>串口调试工具<ul><li>网上随便找个，能测试收发就行</li><li>本文使用  <code>Serial Port Utility</code> </li></ul></li></ul><h3 id="步骤零"><a href="#步骤零" class="headerlink" title="步骤零"></a>步骤零</h3><ul><li><p>串口调试工具</p><ul><li>启动打开 <code>COM1</code>口，波特率 <code>9600</code>  (两端一致就行)</li></ul></li><li><p>模拟机</p><ul><li><p>安装完后，打开命令提示符<code>cmd</code></p></li><li><p>进入你 Android studio<code>sdk</code> 所安装的位置 ,里面的 <code>tools</code></p><ul><li>例如 <code>D:\Android\Sdk\tools</code></li></ul></li><li><p>执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator.exe @api -qemu -serial COM2</span><br></pre></td></tr></table></figure><ul><li><p><code>COM2</code> 是要映射的端口</p></li><li><p><code>api</code>  是我的模拟器 名字</p><ul><li><p>不知道的可用下列命令查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator.exe -list-avds</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>执行成功后，会让你选配置，同串口工具一致即可</p></li><li><p>模拟器开机后，需设置串口权限</p><ul><li><p>进入 <code>D:\Android\Sdk\platform-tools</code></p></li><li><p>执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment"># 进入 Android 内部</span></span><br><span class="line">      adb.exe shell</span><br><span class="line"><span class="comment"># 切换至 管理员权限</span></span><br><span class="line">      su</span><br><span class="line">      <span class="comment"># 打开 串口 所有权限</span></span><br><span class="line">      chmod 777 /dev/ttyS1</span><br><span class="line">      <span class="comment"># 关闭校验</span></span><br><span class="line">      setenforce 0</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p>以上两端联通</p><blockquote><p>大致对应表</p><p>ttyS0  —  COM1</p><p>ttyS1  —  COM2</p><p>注意:</p><p>模拟器的 COM1 口 好像被占用了</p></blockquote></li></ul><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>copy <code>android_serialport_api</code>的文件</p><ul><li><p><code>jni</code>目录(文件夹以及里面全部内容)</p></li><li><p><code>jniLibs</code>目录(文件夹以及里面全部内容)</p></li><li><p><code>android_serialport_api</code>目录(文件夹以及里面全部内容)</p></li></ul><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><ul><li><code>jni</code>和<code>jniLibs</code> 移动至自己项目里的<code>app</code>&gt;<code>src</code>&gt;<code>main</code>下</li><li><code>android_serialport_api</code> 放到 <code>java</code></li></ul><img src="/2020/01/15/android-serialPort/1.png" title="目录结构"><ul><li>移动完成后，用studio 预览下看是否添加成功</li></ul><img src="/2020/01/15/android-serialPort/2.png" title="目录结构"><h3 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h3><p>现在开始使用</p><ul><li><code>/dev/ttyS1</code>   对应 <code>COM2</code> (模拟器上的)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入库</span></span><br><span class="line"><span class="keyword">import</span> android_serialport_api.SerialPort;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  省略不重要代码</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">serialport</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//打开串口 ttyS1</span></span><br><span class="line">    SerialPort mSerialPort = <span class="keyword">new</span> SerialPort(<span class="keyword">new</span> File(<span class="string">"/dev/ttyS1"</span>), <span class="number">9600</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 输出流</span></span><br><span class="line">    OutputStream mOutputStream = mSerialPort.getOutputStream();</span><br><span class="line">    <span class="comment">// 输入流</span></span><br><span class="line">    InputStream mInputStream = mSerialPort.getInputStream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送信息</span></span><br><span class="line">    <span class="keyword">byte</span>[] send_msg = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>];</span><br><span class="line">    send_msg[<span class="number">0</span>] = <span class="keyword">new</span> String(<span class="string">"100"</span>).byteValue();</span><br><span class="line">    mOutputStream.write(send_msg);</span><br><span class="line">    mOutputStream.flush();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//接收信息</span></span><br><span class="line">    <span class="keyword">byte</span>[] get_msg = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> size = mInputStream.read(get_msg);</span><br><span class="line">    String msg = Integer.valueOf(get_msg[<span class="number">0</span>]).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安卓串口通讯&lt;br&gt;Android studio模拟机模拟测试串口通讯，踩坑记录    &lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://lecoler.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://lecoler.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>mpvue 踩坑历程</title>
    <link href="https://lecoler.github.io/2019/09/16/mpvue/"/>
    <id>https://lecoler.github.io/2019/09/16/mpvue/</id>
    <published>2019-09-16T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.785Z</updated>
    
    <content type="html"><![CDATA[<p>开发微信小程序，但迫于原生开发对开发者的不友好，于是使用基于vue开发的mpvue框架开发微信小程序。<br>本文是用于记录本人在使用mpvue时所踩的坑，以及一些经验之谈。  </p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>本文用的是 <img src="https://img.shields.io/badge/mpvue-v2.0-brightgreen" alt="mpvue 2.0"> </li><li>npm下载慢？ <a href="https://lecoler.github.io/2019/03/27/npm-cnpm/">点这解决</a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><a href="https://github.com/Meituan-Dianping/mpvue" target="_blank" rel="noopener">mpvue</a> 是美团开发的一个使用 <code>Vue.js</code> 开发小程序的前端开源框架。<br>框架基于 <code>Vue.js</code> 核心，mpvue 修改了 <code>Vue.js</code> 的 <code>runtime</code> 和 <code>compiler</code> 实现，<br>使其可以运行在小程序环境中，从而为小程序开发引入了整套 <code>Vue.js</code> 开发体验。<blockquote><p>fork 自 <code>vuejs/vue@2.4.1</code>，保留了 <code>vue runtime</code> 能力</p></blockquote><h4 id="mpvue特性"><a href="#mpvue特性" class="headerlink" title="mpvue特性"></a>mpvue特性</h4></li><li>彻底的组件化开发能力：提高代码复用性</li><li>完整的 <code>Vue.js</code> 开发体验</li><li>方便的 <code>Vuex</code> 数据管理方案：方便构建复杂应用</li><li>快捷的 <code>webpack</code> 构建机制：自定义构建策略、开发阶段 hotReload(热更新)</li><li>支持使用 <code>npm</code> 外部依赖</li><li>使用 <code>Vue.js</code> 命令行工具 <code>vue-cli</code> 快速初始化项目</li><li>H5 代码转换编译成小程序目标代码的能力</li></ul><h4 id="支持平台"><a href="#支持平台" class="headerlink" title="支持平台"></a>支持平台</h4><ul><li>微信小程序</li><li>百度小程序</li><li>支付宝小程序</li><li>头条小程序</li><li>h5</li></ul><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>安装环境需 <img src="https://img.shields.io/badge/node-%3E=8.9.0-brightgreen" alt="node&gt;=8.9"> <img src="https://img.shields.io/badge/npm-%3E=5.6-blue" alt="npm&gt;=5.6"><br>调试需要对应平台的<code>开发者工具</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">npm install -g vue-cli@2.9</span><br><span class="line"><span class="comment">#创建</span></span><br><span class="line">vue init mpvue/mpvue-quickstart myApp</span><br><span class="line"><span class="comment">#依赖</span></span><br><span class="line"><span class="built_in">cd</span> myApp</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line">npm run dev</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="new-Page"><a href="#new-Page" class="headerlink" title="new Page"></a>new Page</h3><p>需按特定的格式命名文件(参考现有的文件),以及得在app.json里配置相应路径<br>自定义的话，也可以，不过要改的地方有点多<code>main.js</code>、<code>webpack</code>配置也要改 </p><blockquote><p>e.g:</p><ul><li>pageA<ul><li>index.vue</li><li>main.js(写法固定)</li><li>main.json(官方建议要有，个人感觉可无)</li></ul></li></ul></blockquote><h3 id="将app-json-page-json写在-vue里"><a href="#将app-json-page-json写在-vue里" class="headerlink" title="将app.json/page.json写在***.vue里"></a>将<code>app.json/page.json</code>写在<code>***.vue</code>里</h3><p>v2.0版本，官方建议<code>app.json/page.json</code>另起一个文件，还要维护多一个文件好麻烦啊，直接写在vue里得了用webpack处理下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mpvue-config-loader</span><br></pre></td></tr></table></figure><p>修改<code>build/webpack.base.conf.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module里追加rules，大概在60行左右</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将js部分的 config字段转化成相应的json文件</span></span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">    loader: <span class="string">'mpvue-config-loader'</span>,</span><br><span class="line">    exclude: [resolve(<span class="string">'src/components'</span>)],</span><br><span class="line">    options: &#123;</span><br><span class="line">        entry: <span class="string">'./main.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>使用  </p><ul><li><p>方式一：可自行生成<code>app.json/main.json</code></p></li><li><p>方式二：在<code>.vue</code>里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  config:&#123;</span><br><span class="line">      <span class="string">"navigationBarTitleText"</span>: <span class="string">"练习"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：两种方式只能选其一，不然会发生覆盖错误</p></blockquote><h3 id="引入sass"><a href="#引入sass" class="headerlink" title="引入sass"></a>引入sass</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass sass-loader --save</span><br><span class="line"></span><br><span class="line"><span class="comment">#全局使用sass变量(选装)</span></span><br><span class="line">npm install sass-resources-loader --save</span><br></pre></td></tr></table></figure><h4 id="修改webpack配置-使用全局sass时需修改，不使用就不用"><a href="#修改webpack配置-使用全局sass时需修改，不使用就不用" class="headerlink" title="修改webpack配置(使用全局sass时需修改，不使用就不用)"></a>修改webpack配置(使用全局sass时需修改，不使用就不用)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//build/utils.js文件，大约70行左右</span></span><br><span class="line">scss: generateLoaders(<span class="string">'sass'</span>).concat(&#123;</span><br><span class="line">  loader:<span class="string">'sass-resources-loader'</span>,</span><br><span class="line">    options:&#123;</span><br><span class="line">      resources:path.resolve(__dirname,<span class="string">'../src/libs/base.scss'</span>)  <span class="comment">//这是全局sass的配置文件，路径可随意更改</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在要使用sass的vue文件里的style标签加上<code>lang=&#39;scss&#39;</code> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Tip:<br>注意 <code>webpack</code> 的版本，<code>webpack</code>版本过低，但安装的 <code>sass</code> 版本过高时可能会出错。安装时，注意报错信息就好了😂<br>附: 本人的安装环境 </p><ul><li>“webpack”: “^3.11.0”,</li><li>“node-sass”: “^4.11.0”,</li><li>“sass-loader”: “^7.1.0”,</li><li>“sass-resources-loader”: “^2.0.0”,</li></ul></blockquote><h3 id="引入vuex"><a href="#引入vuex" class="headerlink" title="引入vuex"></a>引入vuex</h3><p>创建模板时选择vuex，或者自行安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><p><a href="https://lecoler.github.io/2019/06/27/vuex/">vuex的用法</a> 同vue里一样，只是在实例中挂载可能有所区别。<br>方式一：按需引入，在要使用的vue文件里 import 引入  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个vue文件里</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br></pre></td></tr></table></figure><p>方式二：全局引入，直接挂载到vue的原型链上  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$store = store</span><br></pre></td></tr></table></figure><h3 id="接入微信云函数"><a href="#接入微信云函数" class="headerlink" title="接入微信云函数"></a>接入微信云函数</h3><p>步骤有四     </p><ul><li><p>其一:  在根目录创建个 云函数目录 e.g: <code>cloud</code>   </p></li><li><p>其二:  修改<code>config/index.js</code>配置文件，大概20行左右，找到<code>wx</code>字段里的<code>platform</code>字段，将值改成<code>platform: &#39;wx/miniprogram&#39;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  wx: &#123;</span><br><span class="line">  template: <span class="string">'wxml'</span>,</span><br><span class="line">  script: <span class="string">'js'</span>,</span><br><span class="line">  style: <span class="string">'wxss'</span>,</span><br><span class="line">  platform: <span class="string">'wx/miniprogram'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>其三:  修改<code>project.config.json</code>微信项目配置文件，新增字段<code>cloudfunctionRoot</code>和修改<code>miniprogramRoot</code>字段  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"miniprogramRoot"</span>: <span class="string">"./miniprogram/"</span>,</span><br><span class="line">  <span class="attr">"cloudfunctionRoot"</span>: <span class="string">"./cloud/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其四:  修改<code>webpack.base.conf.js</code>webpack配置文件，末尾新增个if，当是微信时打包将<code>云函数目录</code>和<code>config项目配置文件</code>copy过去 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PLATFORM = process.env.PLATFORM;</span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/^(swan)|(tt)$/</span>.test(PLATFORM)) &#123;</span><br><span class="line">  baseWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">        <span class="keyword">from</span>: path.resolve(__dirname, projectConfigMap[PLATFORM]),</span><br><span class="line">        to: path.resolve(config.build.assetsRoot)</span><br><span class="line">      &#125;])</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'wx'</span> === PLATFORM) &#123;</span><br><span class="line">  <span class="comment">//云函数</span></span><br><span class="line">  baseWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">        <span class="keyword">from</span>: path.resolve(__dirname, projectConfigMap.tt),</span><br><span class="line">        to: path.resolve(__dirname, <span class="string">'../dist/wx/'</span>)</span><br><span class="line">      &#125;]),</span><br><span class="line">      <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">        <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../apiCloud'</span>),</span><br><span class="line">        to: path.resolve(__dirname, <span class="string">'../dist/wx/cloud'</span>)</span><br><span class="line">      &#125;])</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后:  run <code>dist/wx</code>目录里出现<code>cloud</code>、<code>miniprogram</code>、<code>project.config.json</code>，就成功了</p><blockquote><p>Tip:  </p><ul><li>云函数的添加方法，编译完了还是得在<code>微信开发者工具</code>里更新提交☹ </li><li><code>project.config.json</code>文件，最好将<code>appid</code>字段填正确，不然每次run <code>project.config.json</code>都会被替换，会提示<code>appid</code>不一致😂  </li></ul></blockquote></li></ul><h3 id="坑😠"><a href="#坑😠" class="headerlink" title="坑😠"></a>坑😠</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>同 vue，不同的是在小程序 <code>onReady</code> 后，再去触发 <code>vue mounted</code> 生命周期  </p><blockquote><p>同时还兼容了微信小程序的生命周期，但不建议使用</p></blockquote><hr><h4 id="不支持-BOM／DOM-操作"><a href="#不支持-BOM／DOM-操作" class="headerlink" title="不支持 BOM／DOM 操作"></a>不支持 <code>BOM／DOM</code> 操作</h4><p>小程序里所有的 BOM／DOM 都不能用，也就是说 <code>v-html</code> 指令不能用</p><hr><h4 id="复杂的-JavaScript-渲染表达式可能会出问题"><a href="#复杂的-JavaScript-渲染表达式可能会出问题" class="headerlink" title="复杂的 JavaScript 渲染表达式可能会出问题"></a>复杂的 <code>JavaScript</code> 渲染表达式可能会出问题</h4><blockquote><p>渲染时会把 <code>template</code> 中的双花括号的部分，直接编码到 <code>wxml</code> 文件中，由于微信小程序的能力限制(数据绑定)，所以无法支持复杂的 <code>JavaScript 表达式</code>  </p></blockquote><hr><h4 id="不能在-template-内使用-methods-中的函数"><a href="#不能在-template-内使用-methods-中的函数" class="headerlink" title="不能在 template 内使用 methods 中的函数"></a>不能在 <code>template</code> 内使用 <code>methods</code> 中的函数</h4><p>能用计算属性<code>computed</code>就用计算属性吧</p><hr><h4 id="mpvue不支持自定义tabBar"><a href="#mpvue不支持自定义tabBar" class="headerlink" title="mpvue不支持自定义tabBar"></a>mpvue不支持自定义tabBar</h4><p>方式1: 用微信官方的自定义tabBar写个原生的tabBar，修改webpack配置，copy过去   </p><p>问题： 自定义tabBar会在每个页面都存在（笑），只能用官方提供的<code>wx.hideTabBar()</code>隐藏，以及tabBar选中状态得在当前页面用<code>getTabBar</code>更改选择状态，<br>但是好像<code>getTabBar</code>这个获取不到实例（不知是不是我的操作有误）  </p><p>方式2：先自定义个Vue组件做tabBar，接着在<code>app.json</code>里新增个<code>tabBar</code>字段配置情况同vue组件，然后在<code>App.vue</code>里用<code>wx.hideTabBar()</code>隐藏原生的，<br>vue组件里的tab切换全部用<code>wx.switchTab()</code>    </p><p>问题:  底部导航栏初次切换时，会发生闪烁 </p><hr><h4 id="mpvue不支持slot-scope，连用多个slot时都可能存在问题"><a href="#mpvue不支持slot-scope，连用多个slot时都可能存在问题" class="headerlink" title="mpvue不支持slot-scope，连用多个slot时都可能存在问题"></a>mpvue不支持slot-scope，连用多个slot时都可能存在问题</h4><hr><h4 id="组件上不支持v-show"><a href="#组件上不支持v-show" class="headerlink" title="组件上不支持v-show"></a>组件上不支持v-show</h4><hr><h4 id="组件嵌套存在问题"><a href="#组件嵌套存在问题" class="headerlink" title="组件嵌套存在问题"></a>组件嵌套存在问题</h4><p>简单嵌套是没问题的，太复杂的可能出错，具体标准不知道，得看脸  </p><hr><h4 id="组件使用slot时需重新编译，并且每次更新slot的插入值也需重新编译"><a href="#组件使用slot时需重新编译，并且每次更新slot的插入值也需重新编译" class="headerlink" title="组件使用slot时需重新编译，并且每次更新slot的插入值也需重新编译"></a>组件使用slot时需重新编译，并且每次更新slot的插入值也需重新编译</h4><p>说好的热更新呢😠  </p><hr><h4 id="自定义组件不支持v-model"><a href="#自定义组件不支持v-model" class="headerlink" title="自定义组件不支持v-model"></a>自定义组件不支持v-model</h4><hr><h4 id="改动app-json时需重新编译"><a href="#改动app-json时需重新编译" class="headerlink" title="改动app.json时需重新编译"></a>改动app.json时需重新编译</h4><p>说好的热更新呢😠  </p><hr><h4 id="ios与安卓滚动动画时长不一致，微信api监听屏幕滚动触发时机不一致"><a href="#ios与安卓滚动动画时长不一致，微信api监听屏幕滚动触发时机不一致" class="headerlink" title="ios与安卓滚动动画时长不一致，微信api监听屏幕滚动触发时机不一致"></a>ios与安卓滚动动画时长不一致，微信api监听屏幕滚动触发时机不一致</h4><p>这个不算mpvue的坑，算了不管，记录下来，当初坑了我好久  </p><hr><h4 id="nextTick并不是渲染完成后执行，仅仅只是个延时器（怕不是个假的吧）"><a href="#nextTick并不是渲染完成后执行，仅仅只是个延时器（怕不是个假的吧）" class="headerlink" title="nextTick并不是渲染完成后执行，仅仅只是个延时器（怕不是个假的吧）"></a>nextTick并不是渲染完成后执行，仅仅只是个延时器（怕不是个假的吧）</h4><p>看了下原来官方的也是这样的 </p><blockquote><p><code>wx.nextTick()</code> 延迟一部分操作到下一个时间片再执行。（类似于 setTimeout）</p></blockquote><hr><h4 id="mpvue页面数据与组件并不会随页面销毁而初始化"><a href="#mpvue页面数据与组件并不会随页面销毁而初始化" class="headerlink" title="mpvue页面数据与组件并不会随页面销毁而初始化"></a>mpvue页面数据与组件并不会随页面销毁而初始化</h4><p>页面数据只能自己手动初始化（一个一个this难道不累么）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建议封装挂载到全局，毕竟每次都要用</span></span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="keyword">this</span>.$data, <span class="keyword">this</span>.$options.data());</span><br></pre></td></tr></table></figure><p>组件只能自己手动销毁</p><hr><h4 id="获取页面传参过来的信息"><a href="#获取页面传参过来的信息" class="headerlink" title="获取页面传参过来的信息"></a>获取页面传参过来的信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建议封装挂载到全局，毕竟每次都要用</span></span><br><span class="line"><span class="keyword">this</span>.$root.$mp.query[name]</span><br></pre></td></tr></table></figure><hr><h4 id="大部分原生的事件响应event都在event-mp-detail里"><a href="#大部分原生的事件响应event都在event-mp-detail里" class="headerlink" title="大部分原生的事件响应event都在event.mp.detail里"></a>大部分原生的事件响应<code>event</code>都在<code>event.mp.detail</code>里</h4><hr><h4 id="bind-和-catch-事件同时绑定时，只会触发-bind-catch-不会被触发"><a href="#bind-和-catch-事件同时绑定时，只会触发-bind-catch-不会被触发" class="headerlink" title="bind 和 catch 事件同时绑定时，只会触发 bind ,catch 不会被触发"></a><code>bind</code> 和 <code>catch</code> 事件同时绑定时，只会触发 <code>bind</code> ,<code>catch</code> 不会被触发</h4><hr><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><ul><li><code>.stop</code> 可以阻止冒泡，但绑多一个非冒泡事件时会失效</li><li><code>.once</code> 不能用</li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>目前踩到的坑就这些，有些可能忘记了，等遇到想起来再来补充。<br>了解更多的可以看<a href="http://mpvue.com/mpvue/" target="_blank" rel="noopener">官网文档</a>，文档里没写？可以去<a href="https://github.com/Meituan-Dianping/mpvue/issues" target="_blank" rel="noopener">issues</a>看看  </p></blockquote><p>附:<br>     个人开发时常用封装 </p><ul><li><p>/ibs/utils.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取页面消息参数</span></span><br><span class="line"><span class="comment">   * @param name</span></span><br><span class="line"><span class="comment">   * 参数名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getQuery(name) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$root.$mp.query[name];</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">      初始化data数据（由于mpvue在组件销毁时没有初始化data，需手动init）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>.$data, <span class="keyword">this</span>.$options.data());</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 跳转页面</span></span><br><span class="line"><span class="comment">   * @param id  文件目录的名字,如 /pages/index/main 中的 index 即时 称为 id</span></span><br><span class="line"><span class="comment">   *            (页面命名得按照固定格式)</span></span><br><span class="line"><span class="comment">   * @param  param  页面传递间的参数, Object</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  toPage(id, param = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!id) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(param);</span><br><span class="line">    <span class="keyword">if</span> (keys.length) &#123;</span><br><span class="line">      str += <span class="string">`?`</span>;</span><br><span class="line">      keys.forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">        str += <span class="string">`<span class="subst">$&#123;i&#125;</span>=<span class="subst">$&#123;param[i]&#125;</span>&amp;`</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      str = str.slice(<span class="number">0</span>, str.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: <span class="string">`/pages/<span class="subst">$&#123;id&#125;</span>/main<span class="subst">$&#123;str&#125;</span>`</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 快速显示消息框</span></span><br><span class="line"><span class="comment">   * @param msg</span></span><br><span class="line"><span class="comment">   * 消息内容</span></span><br><span class="line"><span class="comment">   * @param opts</span></span><br><span class="line"><span class="comment">   * 额外参数</span></span><br><span class="line"><span class="comment">   *  icon</span></span><br><span class="line"><span class="comment">   * 消息图标 默认没有</span></span><br><span class="line"><span class="comment">   *  time</span></span><br><span class="line"><span class="comment">   * 持续时间 默认1500ms</span></span><br><span class="line"><span class="comment">   *  done</span></span><br><span class="line"><span class="comment">   * 文字消失时的回调 默认 false</span></span><br><span class="line"><span class="comment">   *    @return  Promise</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  showMessage(msg, opts) &#123;</span><br><span class="line">    <span class="keyword">const</span> flag = msg.constructor == <span class="built_in">String</span> || msg.constructor == <span class="built_in">Number</span>;</span><br><span class="line">    opts = opts || &#123;&#125;;</span><br><span class="line">    opts.time = opts.time || <span class="number">1500</span>;</span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">      title: flag ? msg : <span class="string">'参数格式不正确'</span>,</span><br><span class="line">      icon: opts.icon || <span class="string">'none'</span>,</span><br><span class="line">      duration: opts.time</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (opts.done) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, opts.time));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 显示loading</span></span><br><span class="line"><span class="comment">   * @param msg</span></span><br><span class="line"><span class="comment">   * 消息内容, 默认 '正在加载'</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  showLoading(msg = <span class="string">'正在加载'</span>) &#123;</span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">      title: msg,</span><br><span class="line">      mask: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 预览图片</span></span><br><span class="line"><span class="comment">   * 图片url数组</span></span><br><span class="line"><span class="comment">   * @param array</span></span><br><span class="line"><span class="comment">   * @param index</span></span><br><span class="line"><span class="comment">   * 数组下标,显示第几张图片,默认第一张</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  previewImage(array, index = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> url = array[index];</span><br><span class="line">      wx.previewImage(&#123;</span><br><span class="line">        current: url,</span><br><span class="line">        urls: array,</span><br><span class="line">        success: resolve,</span><br><span class="line">        fail: reject</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">'./libs/utils'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//挂载全局工具集</span></span><br><span class="line">Vue.prototype.$utils = utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取页面消息参数</span></span><br><span class="line">Vue.prototype.$getQuery = utils.getQuery;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化页面内data</span></span><br><span class="line">Vue.prototype.$init = utils.init;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发微信小程序，但迫于原生开发对开发者的不友好，于是使用基于vue开发的mpvue框架开发微信小程序。&lt;br&gt;本文是用于记录本人在使用mpvue时所踩的坑，以及一些经验之谈。  &lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lecoler.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://lecoler.github.io/tags/vue/"/>
    
      <category term="小程序" scheme="https://lecoler.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Vuex入门</title>
    <link href="https://lecoler.github.io/2019/06/26/vuex/"/>
    <id>https://lecoler.github.io/2019/06/26/vuex/</id>
    <published>2019-06-26T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.785Z</updated>
    
    <content type="html"><![CDATA[<p>笔记整理，记录下vuex的基本用法，看完这个就可以算是入门了</p><a id="more"></a><h3 id="什么是Vuex"><a href="#什么是Vuex" class="headerlink" title="什么是Vuex"></a>什么是Vuex</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="直接下载-CDN-引用"><a href="#直接下载-CDN-引用" class="headerlink" title="直接下载 / CDN 引用"></a>直接下载 / CDN 引用</h4><p><a href="https://unpkg.com/vuex" target="_blank" rel="noopener">下载链接</a>  基于 NPM 的 CDN 链接，该链接会一直指向 NPM 上发布的最新版本。<br>您也可以通过 <a href="https://unpkg.com/vuex@2.0.0" target="_blank" rel="noopener">https://unpkg.com/vuex@2.0.0 </a>这样的方式指定特定的版本。<br>在 Vue 之后引入 vuex 会进行自动安装： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/path/to/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/path/to/vuex.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="npm-yarn"><a href="#npm-yarn" class="headerlink" title="npm/yarn"></a>npm/yarn</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><p>或者 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vuex</span><br></pre></td></tr></table></figure><p>在一个模块化的打包系统中，您必须显式地通过 <code>Vue.use()</code> 来安装 Vuex： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)  </p><ul><li>state相当于vue中的data  </li><li>getter相当于vue中的计算属性computed </li><li>mutation、action就是方法methods </li><li>module如同字面上的意思模块</li></ul><p>目录结构</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── App.vue</span><br><span class="line">├── main.js</span><br><span class="line">├── components</span><br><span class="line">│   ├── component-A.vue</span><br><span class="line">│   └── ...</span><br><span class="line">├── views</span><br><span class="line">│   ├── home.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          <span class="comment"># 我们组装模块并导出 store 的地方</span></span><br><span class="line">    └── modules</span><br><span class="line">        ├── cart.js       <span class="comment"># 购物车模块</span></span><br><span class="line">        └── products.js   <span class="comment"># 产品模块</span></span><br></pre></td></tr></table></figure><p>store/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">      a: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>外部调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.state.a  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">      a: <span class="number">1</span>,</span><br><span class="line">      b: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">      getA: <span class="function"><span class="params">state</span> =&gt;</span> state.a,</span><br><span class="line">      ab(state)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.a + state.b;</span><br><span class="line">      &#125;,</span><br><span class="line">      sum: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function"><span class="params">num</span> =&gt;</span> state.a + num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>外部调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.getters.getA   <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$store.getters.ab   <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$store.getters.sum(<span class="number">10</span>)   <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">      a: <span class="number">1</span>,</span><br><span class="line">      b: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">      setA(state,num)&#123;</span><br><span class="line">        state.a = num;</span><br><span class="line">      &#125;,</span><br><span class="line">      change(state)&#123;</span><br><span class="line">        [state.a,state.b] = [state.b,state.a];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>外部调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'change'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$store.state.a   <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">this</span>.$store.state.b   <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'setA'</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$store.state.a   <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">      a: <span class="number">1</span>,</span><br><span class="line">      b: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">      setA(state,num)&#123;</span><br><span class="line">        state.a = num;</span><br><span class="line">      &#125;,</span><br><span class="line">      change(state)&#123;</span><br><span class="line">        [state.a,state.b] = [state.b,state.a];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line">      updateA(context,num)&#123;</span><br><span class="line">        context.commit(<span class="string">'setA'</span>,num)</span><br><span class="line">      &#125;,</span><br><span class="line">      change(&#123;commit&#125;)&#123;</span><br><span class="line">        commit(<span class="string">'change'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>外部调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'updateA'</span>,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'change'</span>)</span><br></pre></td></tr></table></figure><h4 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h4><p>每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><p>更详细内容,请移步<a href="https://vuex.vuejs.org/zh/installation.html" target="_blank" rel="noopener">vuex文档</a><br>此文是为了照顾只有7秒记忆的自己用的 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记整理，记录下vuex的基本用法，看完这个就可以算是入门了&lt;/p&gt;
    
    </summary>
    
      <category term="随手记" scheme="https://lecoler.github.io/categories/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="vuex" scheme="https://lecoler.github.io/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>css加载会有什么影响</title>
    <link href="https://lecoler.github.io/2019/03/31/css-load/"/>
    <id>https://lecoler.github.io/2019/03/31/css-load/</id>
    <published>2019-03-31T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.785Z</updated>
    
    <content type="html"><![CDATA[<p>结论：</p><ol><li>css 加载不会阻塞DOM树的解析</li><li>css 加载会阻塞DOM树的渲染</li><li>css 加载会阻塞后面js语句的执行</li></ol><a id="more"></a><p>为了避免让用户看到长时间的白屏时间，应尽可能提高css加载速度<br>优化方案：</p><ol><li>CDN加速</li><li>对css压缩</li><li>合理使用缓存（设置cache-control、expires、E-tag，不过要注意文件更新后缓存带来的问题，最常用的方法是在文件名后追加个版本号）</li><li>减少http请求数，合并css文件</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;css 加载不会阻塞DOM树的解析&lt;/li&gt;
&lt;li&gt;css 加载会阻塞DOM树的渲染&lt;/li&gt;
&lt;li&gt;css 加载会阻塞后面js语句的执行&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="随手记" scheme="https://lecoler.github.io/categories/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="css" scheme="https://lecoler.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css实现水平垂直居中</title>
    <link href="https://lecoler.github.io/2019/03/29/css-center/"/>
    <id>https://lecoler.github.io/2019/03/29/css-center/</id>
    <published>2019-03-29T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.785Z</updated>
    
    <content type="html"><![CDATA[<p>css 实现水平垂直居中的n种方法</p><a id="more"></a><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一:"></a>方式一:</h3><p>最常用的方法是使用<code>height</code> + <code>line-height</code>的方式，设置同样的值，配合<code>text-align</code>的使用，即可实现文本的水平垂直居中对齐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：固定高度，无法实现两行文本的垂直居中对齐</p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二:"></a>方式二:</h3><p>使用绝对定位的方法，配合margin负值使用。可以实现元素的水平垂直居中效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*简化*/</span></span><br><span class="line"><span class="selector-class">.Box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 50px);</span><br><span class="line">    <span class="attribute">left</span>: <span class="built_in">calc</span>(50% - 50px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：固定高度，高度无法自适应内容。元素脱离文档流。</p><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三:"></a>方式三:</h3><p>使用绝对定位的方法，配合<code>margin:auto</code>使用。可以实现元素的水平垂直居中效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：元素脱离文档流。</p><h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四:"></a>方式四:</h3><p>使用<code>display:table-cell</code>，将父元素的display，变成表格，再配合<code>vertical-align:middle</code>使用。可以实现元素的水平垂直居中效果。  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">        display: table;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.obox</span>&#123;</span></span><br><span class="line">        display: table-cell;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'obox'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缺点：改变了父元素的display，因为IE6-7不支持<code>display:table-cell</code>，所以使用了大量的hack,而且必须有3个元素，不然不能定位。</p><h3 id="方式五"><a href="#方式五" class="headerlink" title="方式五:"></a>方式五:</h3><p>使用<code>display:inline-block</code>，必须给父元素设置高度再配合<code>vertical-align:middle</code>使用。可以实现元素的水平垂直居中效果。  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">        height: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.obox</span>&#123;</span></span><br><span class="line">        display: inline-block;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'obox'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缺点：多了一个标签，需要给父元素设置高度不然没参照物。而又因为IE6-7不支持<code>display:inline-block</code>，增加了hack。</p><h3 id="方式六"><a href="#方式六" class="headerlink" title="方式六:"></a>方式六:</h3><p>CSS3中存在flex布局（伸缩布局盒模型，也叫弹性布局盒模型），对于flex熟悉的朋友来说，使用flex实现水平垂直居中是再简单不过的了。</p><p>当我们使父元素<code>display: flex</code>时，<code>margin: auto</code>不仅可以水平居中，也能够实现垂直居中。这是因为auto外边距会平分水平或垂直方向上的额外空间。</p><p>当然，也可以使用<code>justify-content: center</code>来定义弹性项目主轴的对齐方式，<code>align-items: center</code>来定义弹性项目侧轴的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*or*/</span></span><br><span class="line"><span class="selector-class">.Box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：兼容问题</p><h3 id="方式七"><a href="#方式七" class="headerlink" title="方式七:"></a>方式七:</h3><p>CSS3中还新增了grid布局（网格布局）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：兼容问题</p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip:"></a>Tip:</h3><ul><li><p>什么是 CSS hack ?</p><ul><li><p>由于不同厂商的浏览器，比如Internet Explorer,Safari,Mozilla Firefox,Chrome等，或者是同一浏览器的不同版本，如IE6和IE7，对CSS的解析认识不完全一样，因此会导致生成的页面效果不一样，得不到所需要的页面效果。 需要针对不同的浏览器去写不同的CSS，让它能够同时兼容不同的浏览器，能在不同的浏览器中也能得到我们想要的页面效果。</p></li><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">    <span class="attribute">-webkit-background</span>:green;<span class="comment">/*forfirefox*/</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>hack 三大类</p><ul><li>CSS属性前缀法</li><li>选择器前缀法</li><li>IE条件注释法（即HTML头部引用if IE）Hack</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css 实现水平垂直居中的n种方法&lt;/p&gt;
    
    </summary>
    
      <category term="随手记" scheme="https://lecoler.github.io/categories/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="css" scheme="https://lecoler.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>http、https、tcp与udp的简单了解</title>
    <link href="https://lecoler.github.io/2019/03/29/http-https-tcp-udp/"/>
    <id>https://lecoler.github.io/2019/03/29/http-https-tcp-udp/</id>
    <published>2019-03-29T00:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.785Z</updated>
    
    <content type="html"><![CDATA[<p>由于被人问到http和https的区别时，自己顿时一脸懵逼，特此写文记录。</p><a id="more"></a><h4 id="get-和-post-不同"><a href="#get-和-post-不同" class="headerlink" title="get 和 post 不同"></a>get 和 post 不同</h4><ul><li>get 参数url可见，post不可见</li><li>get 发一个包，post发两个包<ul><li>get 没body只发一次，post 将一个包分两次（header和body分开）发送</li></ul></li></ul><h4 id="http-和-https-不同"><a href="#http-和-https-不同" class="headerlink" title="http 和 https 不同"></a>http 和 https 不同</h4><ul><li>https 是 http的安全版，在http下加入ssl层，需要到ca申请证书</li><li>http 明文未加密，https加密</li><li>端口不同http 80，https 443</li></ul><h4 id="tcp三次握手"><a href="#tcp三次握手" class="headerlink" title="tcp三次握手"></a>tcp三次握手</h4><ul><li>连接建立（SYN，SYN-ACK, ACK）</li><li>连接终止（FIN,ACK 、FIN,ACK）</li></ul><h4 id="tcp-和-udp-不同"><a href="#tcp-和-udp-不同" class="headerlink" title="tcp 和 udp 不同"></a>tcp 和 udp 不同</h4><ul><li>tcp 面向连接，udp 面向非连接</li><li>udp 可能丢包，传输不可靠，tcp 传输可靠</li><li>udp 速度 比 tcp 快</li><li>udp 适合传输大量数据，tcp 少量数据</li><li>udp 支持 1对1，1对n，n对1，n对n，tcp 只支持 1对1</li><li>udp 没控制机制，tcp 有控制机制</li></ul><h4 id="http1-0-和-http1-1-不同"><a href="#http1-0-和-http1-1-不同" class="headerlink" title="http1.0 和 http1.1 不同"></a>http1.0 和 http1.1 不同</h4><ul><li>http1.1 支持长连接、请求的流水线处理，http1.0 只有短连接<ul><li>长连接 用  请求头Connection：Keep-Alive时，保持连接；Connection：close，关闭连接</li></ul></li><li>http1.1 支持 身份认证、状态管理、cache缓存机制</li><li>http1.1 新增 报文头host字段</li><li>http1.1 新增 100状态码（节约带宽）</li><li>http1.1 发送信息分割成多个片段，每个块附带长度，结束长度为0，避免缓冲整个信息造成过载<h4 id="http2-0"><a href="#http2-0" class="headerlink" title="http2.0"></a>http2.0</h4></li><li>header 压缩</li><li>服务器推送</li><li>新的二进制格式</li><li>多路复用</li><li>性能较1.x大幅提升</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于被人问到http和https的区别时，自己顿时一脸懵逼，特此写文记录。&lt;/p&gt;
    
    </summary>
    
      <category term="随手记" scheme="https://lecoler.github.io/categories/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="http" scheme="https://lecoler.github.io/tags/http/"/>
    
      <category term="协议" scheme="https://lecoler.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>npm 疑难杂症收集</title>
    <link href="https://lecoler.github.io/2019/03/26/npm-cnpm/"/>
    <id>https://lecoler.github.io/2019/03/26/npm-cnpm/</id>
    <published>2019-03-26T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.785Z</updated>
    
    <content type="html"><![CDATA[<p>开发中使用npm经常会遇到各种各样的问题，在此收集记录，以便后续再遇到能直接查询。</p><a id="more"></a><h4 id="配置成-cnpm"><a href="#配置成-cnpm" class="headerlink" title="配置成 cnpm"></a>配置成 cnpm</h4><p>npm 国外源速度慢<br>切换 国内淘宝镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h4 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install log4js</span><br></pre></td></tr></table></figure><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a><code>npm</code></h4><ul><li>说明：NPM（节点包管理器）是的NodeJS的包管理器，用于节点插件管理（包括安装，卸载，管理依赖等）</li><li>使用NPM安装插件：命令提示符执行npm install name [-g] [–save-dev] <ul><li>name：节点插件名称。 </li></ul></li></ul><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-less --save-dev</span><br></pre></td></tr></table></figure><ul><li><p>常用指令</p><ul><li>-g：全局安装。 将会安装在C：\ Users \ Administrator \ AppData \ Roaming \ npm，并且写入系统环境变量;非全局安装：将会安装在当前定位目录;全局安装可以通过命令行任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过要求（）调用;</li><li>–save：将保存至的package.json（的package.json是的NodeJS项目配置文件）</li><li>-dev;：保存至的package.json的devDependencies节点，不指定-dev将保存至依赖节点</li></ul><h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><p>加上上面常用指令，将在卸载的同时，执行上面相反的操作<br>e.g </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卸载gulp-less，同时移除package.json中配置</span></span><br><span class="line">npm uninstall gulp-less --save</span><br></pre></td></tr></table></figure></li></ul><h5 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean -f</span><br></pre></td></tr></table></figure><h5 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure><h4 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h4><ol><li><p><strong>win下，使用<code>npm install</code>/<code>cnpm install</code>报错</strong></p><p>环境</p><blockquote><p>系统：win10家庭版</p><p>node：v12.16.3</p><p>npm：6.14.5</p></blockquote><p><code>npm install</code>报错信息</p><blockquote><p>npm WARN tar EINVAL: invalid argument, futime<br>npm WARN tar EINVAL: invalid argument, futime<br>npm WARN tar EINVAL: invalid argument, futime<br>npm WARN tar EINVAL: invalid argument, futime<br>npm ERR! Maximum call stack size exceeded</p></blockquote><p><code>cnpm install</code>报错信息</p><blockquote><p>Install fail! Error: EISDIR: illegal operation on a directory, symlink …….</p></blockquote><p><strong>解决方案</strong></p><p>项目所在盘符格式为<code>FAT32</code>  移至 <code>NTFS</code>格式盘符  ，安装成功</p></li></ol><ol start="2"><li><p><strong>win下，使用<code>npm install -g 包名</code> 报错</strong></p><p><code>npm install</code>报错信息</p><blockquote><p>npm ERR! Maximum call stack size exceeded</p></blockquote><p><strong>解决方案</strong></p><p>找到全局安装的位置，把相应包删掉，再执行安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大致路径 C:\Users\pc\AppData\Roaming\npm\node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行安装</span></span><br><span class="line">npm install -g 包名 -f</span><br></pre></td></tr></table></figure></li><li><p><strong>win下，<code>npm run</code> 报错</strong></p><p>报错信息</p><img src="/2019/03/26/npm-cnpm/q3.png" title="error_img"><p><strong>解决方案</strong></p><p>sass版本太高，切换成低版本试试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载当前版本</span></span><br><span class="line">npm uninstall sass-loader</span><br><span class="line"><span class="comment"># 安装8.0.0版本</span></span><br><span class="line">npm install sass-loader@8.0.0 -D</span><br></pre></td></tr></table></figure></li><li><p><strong>win下，<code>npm install</code>报错</strong></p><blockquote><p>win10 64位</p><p>Python 3.9.5</p></blockquote><img src="/2019/03/26/npm-cnpm/q4.png" title="error_img"><p><strong>解决方案</strong></p><ul><li>方法一：因<code>node-gyp</code>与当前系统版本不符，如<code>node</code>32位 系统64位，切换<code>node</code>至64位，并执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean -f</span><br><span class="line">npm install --global --production windows-build-tools</span><br><span class="line">npm install --global node-gyp</span><br></pre></td></tr></table></figure><ul><li>方法二：未配置系统环境变量<code>python</code>，添加配置后重试</li><li>方法三：<code>node-sass</code>版本与<code>nodejs</code>版本不支持，修改至<a href="https://www.npmjs.com/package/node-sass" target="_blank" rel="noopener">相应版本</a></li></ul></li></ol><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p><strong>Tip: 用<code>cnpm</code>总是遇到奇奇怪怪的问题</strong></p><h5 id="改用npm换源至淘宝"><a href="#改用npm换源至淘宝" class="headerlink" title="改用npm换源至淘宝"></a>改用<code>npm</code>换源至淘宝</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><h5 id="切换会默认源"><a href="#切换会默认源" class="headerlink" title="切换会默认源"></a>切换会默认源</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><h5 id="万能解决因网络导致问题的方法"><a href="#万能解决因网络导致问题的方法" class="headerlink" title="万能解决因网络导致问题的方法"></a>万能解决因网络导致问题的方法</h5><p>安装sass时，因网络导致，出现问题</p><p>使用<code>mirror-config-china</code>镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g mirror-config-china</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发中使用npm经常会遇到各种各样的问题，在此收集记录，以便后续再遇到能直接查询。&lt;/p&gt;
    
    </summary>
    
      <category term="随手记" scheme="https://lecoler.github.io/categories/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="npm" scheme="https://lecoler.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>解决开发跨域问题</title>
    <link href="https://lecoler.github.io/2019/03/17/crossDomain/"/>
    <id>https://lecoler.github.io/2019/03/17/crossDomain/</id>
    <published>2019-03-17T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.781Z</updated>
    
    <content type="html"><![CDATA[<p>解决在开发过程中遇到的跨域问题</p><a id="more"></a><h3 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h3><p>当协议、子域名、主域名、端口号中任意一个不相同时，都是不在同一域下。<br>不同域之间相互请求资源，就算作“跨域”  </p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><p>在最新版 谷歌浏览器 快捷方式/启动时 上添加条启动命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-disable-web-security -user-data-dir="d:\Temp"</span><br><span class="line">e.g:</span><br><span class="line">目标： C:\Users\pt\AppData\Local\Google\Chrome\Application\chrome.exe </span><br><span class="line">-disable-web-security -user-data-dir="d:\Temp"</span><br></pre></td></tr></table></figure><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><p>安装谷歌插件 Allow-Control-Allow-Origin: *</p><h4 id="方式三："><a href="#方式三：" class="headerlink" title="方式三："></a>方式三：</h4><p>后端添加请求头</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Methods</span><br><span class="line">Access-Control-Allow-Origin</span><br><span class="line">Access-Control-Allow-Headers</span><br></pre></td></tr></table></figure><h4 id="方式四："><a href="#方式四：" class="headerlink" title="方式四："></a>方式四：</h4><p>配置代理，如nginx</p><h4 id="方式五："><a href="#方式五：" class="headerlink" title="方式五："></a>方式五：</h4><p>jsonp </p><ul><li>服务器需要改动代码进行支持</li><li>只支持GET方法</li><li>发送的不是xhr请求，不支持异步方法</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决在开发过程中遇到的跨域问题&lt;/p&gt;
    
    </summary>
    
      <category term="随手记" scheme="https://lecoler.github.io/categories/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="跨域" scheme="https://lecoler.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>git 常用指令</title>
    <link href="https://lecoler.github.io/2018/07/12/git/"/>
    <id>https://lecoler.github.io/2018/07/12/git/</id>
    <published>2018-07-12T16:00:00.000Z</published>
    <updated>2021-05-27T10:05:14.785Z</updated>
    
    <content type="html"><![CDATA[<p>自己经常忘记git的指令，特意记录下</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>全局配置（局部只需删掉<code>--global</code>）</p><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">""</span></span><br><span class="line">git config --global user.email <span class="string">"***@qq.com"</span></span><br></pre></td></tr></table></figure><h3 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h3><p>全局永久记住密码（局部只需删掉<code>--global</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>全局默认记住密码15分钟</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper cache</span><br></pre></td></tr></table></figure><h3 id="编辑全局配置文件"><a href="#编辑全局配置文件" class="headerlink" title="编辑全局配置文件"></a>编辑全局配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --edit</span><br></pre></td></tr></table></figure><h3 id="查看已配置项"><a href="#查看已配置项" class="headerlink" title="查看已配置项"></a>查看已配置项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --lsit</span><br></pre></td></tr></table></figure><h3 id="删除配置项"><a href="#删除配置项" class="headerlink" title="删除配置项"></a>删除配置项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">unset</span> user.name</span><br></pre></td></tr></table></figure><p>全局 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>先进项目的根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="关联远程"><a href="#关联远程" class="headerlink" title="关联远程"></a>关联远程</h2><h3 id="关联远程仓库地址"><a href="#关联远程仓库地址" class="headerlink" title="关联远程仓库地址"></a>关联远程仓库地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加</span></span><br><span class="line">git remote add -f origin http://xxx.git</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">git remote rm origin</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin http://xxxx.git</span><br></pre></td></tr></table></figure><h3 id="查看远程关联信息"><a href="#查看远程关联信息" class="headerlink" title="查看远程关联信息"></a>查看远程关联信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h3 id="添加关联多个远程仓库"><a href="#添加关联多个远程仓库" class="headerlink" title="添加关联多个远程仓库"></a>添加关联多个远程仓库</h3><p>分多次push</p><ul><li>origin2 可自定义</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin2 https://xxxx.xxx.git</span><br></pre></td></tr></table></figure><p>一次push 到 多个远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url --add origin https://xxx.xxx.git</span><br></pre></td></tr></table></figure><h3 id="删除添加关联的远程仓库"><a href="#删除添加关联的远程仓库" class="headerlink" title="删除添加关联的远程仓库"></a>删除添加关联的远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url --delete origin https://xxx.xx.git</span><br></pre></td></tr></table></figure><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><h3 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .<span class="comment">#新增， ” . “ 表示全部</span></span><br><span class="line">git commit -m <span class="string">"*****"</span>  <span class="comment">#描述</span></span><br></pre></td></tr></table></figure><h3 id="将本地代码提交至服务器"><a href="#将本地代码提交至服务器" class="headerlink" title="将本地代码提交至服务器"></a>将本地代码提交至服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span></span><br><span class="line"></span><br><span class="line">git push origin master      <span class="comment">#master 主分支</span></span><br></pre></td></tr></table></figure><blockquote><p>参数 -u<br>将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push，这叫做simple方式，默认只推送当前分支<br>此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。<br>Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式  </p></blockquote><h3 id="强制提交覆盖"><a href="#强制提交覆盖" class="headerlink" title="强制提交覆盖"></a>强制提交覆盖</h3><p><strong>会被枪杀的</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure><h2 id="删除远程仓库分支"><a href="#删除远程仓库分支" class="headerlink" title="删除远程仓库分支"></a>删除远程仓库分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete 分支名</span><br></pre></td></tr></table></figure><h2 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#git clone &lt;项目链接&gt; </span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://******.git</span><br></pre></td></tr></table></figure><h3 id="指定分支"><a href="#指定分支" class="headerlink" title="指定分支"></a>指定分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b 分支名 https://xxxx.git</span><br></pre></td></tr></table></figure><h3 id="部分下载文件"><a href="#部分下载文件" class="headerlink" title="部分下载文件"></a>部分下载文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add -f orgin https://xxxx.git</span><br><span class="line">git config core.sparseCheckout <span class="literal">true</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'文件名'</span> &gt;&gt; .git/info/sparse-checkout  <span class="comment">#（在.git/info/创建个sparse-checkout文件）</span></span><br><span class="line">git pull orgin master</span><br></pre></td></tr></table></figure><h2 id="更新代码"><a href="#更新代码" class="headerlink" title="更新代码"></a>更新代码</h2><p>服务器 → 本地</p><h3 id="简洁版"><a href="#简洁版" class="headerlink" title="简洁版"></a>简洁版</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></span><br><span class="line"></span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><h3 id="严谨版"><a href="#严谨版" class="headerlink" title="严谨版"></a>严谨版</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在本地新建一个temp分支，并将远程origin仓库的master分支代码下载到本地temp分支</span></span><br><span class="line">git fetch origin master:temp</span><br><span class="line"><span class="comment">#把当前分支与刚下载temp分支的比较下区别</span></span><br><span class="line">git diff temp</span><br><span class="line"><span class="comment">#将当前分支与刚下载temp分支合并</span></span><br><span class="line">git merge temp</span><br><span class="line"><span class="comment">#删除temp分支(想保留可以不删)</span></span><br><span class="line">git branch -d temp</span><br></pre></td></tr></table></figure><h3 id="强制覆盖本地"><a href="#强制覆盖本地" class="headerlink" title="强制覆盖本地"></a>强制覆盖本地</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="拉取远程分支（本地不存在）"><a href="#拉取远程分支（本地不存在）" class="headerlink" title="拉取远程分支（本地不存在）"></a>拉取远程分支（本地不存在）</h3><p><a href="#创建本地不存在，服务器存在的分支">跳转</a></p><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h3><h4 id="全部"><a href="#全部" class="headerlink" title="全部"></a>全部</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h4 id="显示记录和差异"><a href="#显示记录和差异" class="headerlink" title="显示记录和差异"></a>显示记录和差异</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -p</span><br></pre></td></tr></table></figure><h4 id="查看最近n次数"><a href="#查看最近n次数" class="headerlink" title="查看最近n次数"></a>查看最近n次数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -n 参数</span><br><span class="line"></span><br><span class="line"><span class="comment">#e.g  最近10次记录</span></span><br><span class="line">git <span class="built_in">log</span> -n 10</span><br></pre></td></tr></table></figure><h4 id="单行简略、图形显示"><a href="#单行简略、图形显示" class="headerlink" title="单行简略、图形显示"></a>单行简略、图形显示</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --onelie --graph</span><br></pre></td></tr></table></figure><h2 id="版本回滚"><a href="#版本回滚" class="headerlink" title="版本回滚"></a>版本回滚</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^  <span class="comment">#上一个版本就是HEAD^，上上一个版本就是HEAD^^</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#e.g</span></span><br><span class="line">git reset --hard 3628164</span><br></pre></td></tr></table></figure><h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure><h2 id="创建-切换分支"><a href="#创建-切换分支" class="headerlink" title="创建/切换分支"></a>创建/切换分支</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul><li>abc  分支名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch abc</span><br></pre></td></tr></table></figure><h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b abc</span><br></pre></td></tr></table></figure><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout abc</span><br></pre></td></tr></table></figure><h3 id="创建本地不存在，服务器存在的分支"><a href="#创建本地不存在，服务器存在的分支" class="headerlink" title="创建本地不存在，服务器存在的分支"></a>创建本地不存在，服务器存在的分支</h3><ul><li>若报fail，请先执行 pull更新下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b abc orgin/abc</span><br></pre></td></tr></table></figure><h4 id="严瑾版（推荐）"><a href="#严瑾版（推荐）" class="headerlink" title="严瑾版（推荐）"></a>严瑾版（推荐）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在本地新建一个分支，并将远程origin仓库的分支代码下载到本地分支</span></span><br><span class="line">git fetch origin 远程分支名:本地分支名</span><br><span class="line"><span class="comment">#切换分支</span></span><br><span class="line">git checkout 本地分支名</span><br></pre></td></tr></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>将abc分支合并到当前分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge abc</span><br></pre></td></tr></table></figure><h3 id="合并指定分支文件"><a href="#合并指定分支文件" class="headerlink" title="合并指定分支文件"></a>合并指定分支文件</h3><p>将abc分支上的d.doc合并到当前分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout abc d.doc</span><br></pre></td></tr></table></figure><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除abc分支</span></span><br><span class="line">git branch -d abc </span><br><span class="line"></span><br><span class="line"><span class="comment">#强制删除abc分支</span></span><br><span class="line">git branch -D abc</span><br></pre></td></tr></table></figure><h2 id="比较不同分支"><a href="#比较不同分支" class="headerlink" title="比较不同分支"></a>比较不同分支</h2><h3 id="详细差异"><a href="#详细差异" class="headerlink" title="详细差异"></a>详细差异</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff branch1 branch2</span><br></pre></td></tr></table></figure><h3 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff branch1 branch2 --<span class="built_in">stat</span></span><br></pre></td></tr></table></figure><h3 id="指定文件差异"><a href="#指定文件差异" class="headerlink" title="指定文件差异"></a>指定文件差异</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff branch1 branch2 文件路径</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="新建标签"><a href="#新建标签" class="headerlink" title="新建标签"></a>新建标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a 标签名 -m <span class="string">'描述'</span></span><br></pre></td></tr></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><p>本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d 标签名</span><br></pre></td></tr></table></figure><p>远程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete 标签名</span><br><span class="line"></span><br><span class="line"><span class="comment">#git push origin :refs/tags/标签名</span></span><br></pre></td></tr></table></figure><h3 id="查看本地标签"><a href="#查看本地标签" class="headerlink" title="查看本地标签"></a>查看本地标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment">#详情</span></span><br><span class="line">git show 标签名</span><br></pre></td></tr></table></figure><h3 id="上传标签至远程服务器"><a href="#上传标签至远程服务器" class="headerlink" title="上传标签至远程服务器"></a>上传标签至远程服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin 标签名</span><br></pre></td></tr></table></figure><h2 id="创建一个空分支"><a href="#创建一个空分支" class="headerlink" title="创建一个空分支"></a>创建一个空分支</h2><p>常规创建分支会包含当前的提交历史记录，下面方法创建的分支</p><ul><li>不继承任务提交记录</li><li>无父节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成(新分支会有当前的所有文件，但记录为空)</span></span><br><span class="line">git checkout --orphan 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除全部内容（手动删除也可行）</span></span><br><span class="line">git rm -rf .</span><br><span class="line"></span><br><span class="line"><span class="comment">#首次提交（无内容无法提交）</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'描述'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看分支，现在可以看到新建的分支</span></span><br><span class="line">git branch</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己经常忘记git的指令，特意记录下&lt;/p&gt;
    
    </summary>
    
      <category term="随手记" scheme="https://lecoler.github.io/categories/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="git" scheme="https://lecoler.github.io/tags/git/"/>
    
  </entry>
  
</feed>
